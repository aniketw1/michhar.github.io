<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Portfolio</title>
    <description>Jannik Richter, jannik811@gmail.com
</description>
    <link>http://localhost:4000/jekyll-slender-template/</link>
    <atom:link href="http://localhost:4000/jekyll-slender-template/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Aug 2017 22:43:52 -0700</pubDate>
    <lastBuildDate>Thu, 24 Aug 2017 22:43:52 -0700</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>On using an Adaline Artificial Neuron for the Classification</title>
        <description>&lt;p&gt;&lt;strong&gt;tl:dr&lt;/strong&gt;:  Getting a simple, predictive framework distinguishing two types of leukemia based on biological markers from a single-layer neural network was not the intent of this exercise. It is, however, indicative of the power of a single artificial neuron and thoughtful feature reduction.&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The intent of this post originally was to show the inner workings and limitations of a single artificial neuron using some moderately complex, noisy data; a challenge of sorts - “is this noisy data linearly separable with a single artificial neuron and if not, why is that?”.&lt;/p&gt;

&lt;p&gt;However, I found with some data and algorithm exploration, that I could distinguish between two types of leukemia — a naive approach and not really biologically significant, but an interesting outcome nonetheless.  So, even though this post is about the data science, it also touches on a potential method to use in the real world.&lt;/p&gt;

&lt;p&gt;In this post, you’ll find information on the use of PCA for data reduction/feature engineering, scaling and normalization for preprocessing, the Adaline algorithm (artificial neuron), different activation functions, among other topics and concepts.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-an-adaline-artificial-neuron&quot;&gt;What is an Adaline artificial neuron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adaline-with-a-sigmoid-activation-function&quot;&gt;Adaline with a sigmoid activation function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#choosing-an-activation-function&quot;&gt;Choosing an activation function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-noisy-data&quot;&gt;The noisy data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3d-to-run-through-network-and-2d-to-gain-insights&quot;&gt;3D to run through network and 2D to gain insights&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion-from-my-experiment&quot;&gt;Conclusion from my experiment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#credits-and-further-reading&quot;&gt;Credits and further reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-an-adaline-artificial-neuron&quot;&gt;What is an Adaline artificial neuron&lt;/h3&gt;

&lt;p&gt;The ADAptive LInear NEuron (Adaline) algorithm is very similar to a Perceptron (simplest of the artificial neurons) except that in the Perceptron the weights are updated based on a unit step activation function output (see figure below) whereas Adaline uses a linear activation function to update it’s weights giving it a more robust result (that even converges with samples that are not completely separable by a linear hyperplane, unlike the Perceptron).  In Adaline a &lt;em&gt;quantizer&lt;/em&gt; after the activation function, is used to then predict class labels.&lt;/p&gt;

&lt;p&gt;Beyond the linear activation function and the &lt;em&gt;quantizer&lt;/em&gt;, we see the use of a &lt;em&gt;cost function&lt;/em&gt;, or &lt;em&gt;objective function&lt;/em&gt;, to update the weights.  In this case we want to minimize this function with an optimization method.  The optimization of the &lt;em&gt;cost function&lt;/em&gt; happens with yet another function aptly and simply named an &lt;em&gt;optimization function&lt;/em&gt;.  In this case our optimization function is &lt;em&gt;stochastic gradient decent&lt;/em&gt;, which one can of as “climbing down a hill” (using part of the data to calculate, shuffled as well) to get to the minima of the cost function’s convex curve (as it updates weights iteratively from a shuffled dataset).&lt;/p&gt;

&lt;p&gt;A really great discussion from which much of this information was adapted can be found in Sebastian Raschka’s &lt;em&gt;Python Machine Learning&lt;/em&gt; book (link &lt;a href=&quot;https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning&quot;&gt;here&lt;/a&gt;) and excellent blog post on this topic &lt;a href=&quot;http://sebastianraschka.com/Articles/2015_singlelayer_neurons.html&quot;&gt;here&lt;/a&gt; on the single-layer neurons.&lt;/p&gt;

&lt;h3 id=&quot;adaline-with-a-sigmoid-activation-function&quot;&gt;Adaline with a sigmoid activation function&lt;/h3&gt;

&lt;p&gt;I grabbed Raschka’s ADAptive LInear NEuron (Adaline) classifier open-source code &lt;a href=&quot;https://github.com/PacktPublishing/Python-Machine-Learning/blob/master/3547_02_Code.ipynb&quot;&gt;here&lt;/a&gt; (the AdalineSGD class) and updated the activation function to logistic sigmoid from a linear function.&lt;/p&gt;

&lt;p&gt;Note, with the Adaline (versus the Perceptron) we use a continuous number rather than the binary class label, to compute the model error and update the weights.  Then to predict a class label, another function is used called a &lt;em&gt;quantizer&lt;/em&gt;.  Also, the weights are updated in a more sophisticated manner.&lt;/p&gt;

&lt;h3 id=&quot;choosing-an-activation-function&quot;&gt;Choosing an activation function&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/single_layer_neuron/singleneuron_activation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In code, given this “net input” function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;net_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Calculate net input&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I update the activation function from linear as in:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Compute linear activation&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To a logistic sigmoidal function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;activation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Compute sigmoidal activation
        
        Returns
        -------
        A 1d array of length n_samples

        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Full code &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/machine_learning/leukemia_notebook.ipynb&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/machine_learning/adaline_sgd.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We still get linear classification boundaries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These single-neuron classifiers can only result in linear decision boundaries, even if using a non-linear activation, because it’s still using a single threshold value, &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; as in diagram above, to decide whether a data point is classified as 1 or -1.&lt;/p&gt;

&lt;h3 id=&quot;the-noisy-data&quot;&gt;The noisy data&lt;/h3&gt;

&lt;p&gt;The data was downloaded from the Machine Learning Data Set Repository &lt;a href=&quot;https://mldata.org&quot;&gt;mldata.org&lt;/a&gt; using a convenience function from &lt;code class=&quot;highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.datasets.mldata&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch_mldata&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Fetch a small leukemia dataset from mldata.org&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   http://mldata.org/repository/data/viewslug/leukemia-all-vs-aml/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_data_home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tempfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdtemp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leuk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch_mldata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'leukemia'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transpose_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;data_home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_data_home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The data is a small, but wide acute lymphocytic leukemia (ALL) vs. acute myelogenous leukemia (AML) dataset.  It has approximately 7000 biological markers (our features), vs. 72 samples (our data points).&lt;/p&gt;

&lt;p&gt;Given the noisy nature of the data and possible skewedness, it was standardized and normalized with convenience functions from &lt;code class=&quot;highlighter-rouge&quot;&gt;scikit-learn&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RobustScaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Normalizer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Fit the scalar to the training dataset for &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   zero mean and unit variance of features.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   Using a robust scaler which is more resistent to outliers.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scaler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RobustScaler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scaler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Apply the transform&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Apply the same transform to the test dataset &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   (simulating what happens when we get new data)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Normalizing data as well to scale samples to unit norm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;normalizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Normalizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Full code &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/machine_learning/leukemia_notebook.ipynb&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/machine_learning/adaline_sgd.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I tried just one feature reduction with PCA to reduce all 7129 dimensions to 2D at first.  However, I could not separate out the ALL samples from AML - this wasn’t necessarily important to my post on Adaline neurons I was writing, but I decided to try something I’d read about recently for kicks.  In fact the idea sprung from a comment in a Python script where a perceptron was used to create non-linear separation of data for a plot (from &lt;a href=&quot;https://github.com/daniel-e/pymltools/blob/master/plot_scripts/plot_perceptron_nonlin.py&quot;&gt;this&lt;/a&gt; script on Github).  The comment went:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# map the data into a space with one addition dimension so that
# it becomes linearly separable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, I gave it a shot.&lt;/p&gt;

&lt;h3 id=&quot;3d-to-run-through-network-and-2d-to-gain-insights&quot;&gt;3D to run through network and 2D to gain insights&lt;/h3&gt;

&lt;p&gt;My next step was to try feeding the neural network the data in 3D space (the 3 features or components from the first PCA reduction).&lt;/p&gt;

&lt;p&gt;I then reduced the 3D data to 2D, mainly to visualize it.  A hyperplane was drawn (blank dashed line) to represent the decision boundary.  The surface in the diagram below is representative of a sigmoidal output along the direction of the weight vector.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/single_layer_neuron/linearly_sep_leukemia.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Full code &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/machine_learning/leukemia_notebook.ipynb&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/machine_learning/adaline_sgd.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note, the stochastic part of the single-neuron optimizer, stochastic gradient decent, causes some variation in the results if run again.  It might be a good idea to do a batch version of the Adaline neuron.  Another note is that one does not necessarily have to use a logistic sigmoidal activation function; it was just used here as an experiment and to prove to myself I’d always get a linear decision boundary.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-from-my-experiment&quot;&gt;Conclusion from my experiment&lt;/h3&gt;

&lt;p&gt;I was surprised and impressed that I got a linearly separable result!  Albeit, that was not the intent of this exercise, but indicative of the power of a single neuron and thoughtful feature reduction.  It makes me wonder what a small neural network could do!&lt;/p&gt;

&lt;h3 id=&quot;credits-and-further-reading&quot;&gt;Credits and further reading&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Sebastian Raschka’s &lt;em&gt;Python Machine Learning&lt;/em&gt; &lt;a href=&quot;https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning&quot;&gt;book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The open-source notebooks with code accompanying the &lt;em&gt;Python Machine Learning&lt;/em&gt; book &lt;a href=&quot;https://github.com/PacktPublishing/Python-Machine-Learning&quot;&gt;here&lt;/a&gt; and related code &lt;a href=&quot;https://github.com/rasbt/mlxtend/tree/master/mlxtend/classifier&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Raschka’s blog &lt;a href=&quot;http://sebastianraschka.com/Articles/2015_singlelayer_neurons.html&quot;&gt;post&lt;/a&gt; on &lt;em&gt;Single-Layer Neural Networks and Gradient Descent&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scikit-learn&lt;/code&gt;’s preprocessing data module &lt;a href=&quot;http://scikit-learn.org/stable/modules/preprocessing.html&quot;&gt;link&lt;/a&gt; for scaling features and samples&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/07/19/single-artifical-neuron-for-nonlinear-separable-data.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/07/19/single-artifical-neuron-for-nonlinear-separable-data.html</guid>
        
        <category>single-layer</category>
        
        <category>artificial-neuron</category>
        
        <category>adaline</category>
        
        <category>PCA</category>
        
        <category>leukemia</category>
        
        <category>sigmoid-activation</category>
        
        
      </item>
    
      <item>
        <title>Overlaying a Website ontop of a GitHub Repository</title>
        <description>&lt;p&gt;&lt;strong&gt;tl:dr&lt;/strong&gt;:  A quick discovery post on using static site generators to overlay a website on top of a GitHub repo for displaying docs, portfolios/products, and blogs.&lt;/p&gt;

&lt;p&gt;I recently discovered I can have a static website for each of my GitHub repositories, which seems like overkill for 35+ repos.  That being said, it certainly would be nice to attractively present some of my content I’ve painstakingly written in Markdown files to showcase my work.&lt;/p&gt;

&lt;p&gt;Using static site generators, like Jekyll or MkDocs (and others — good article &lt;a href=&quot;https://www.fullstackpython.com/static-site-generator.html&quot;&gt;here&lt;/a&gt;) combined with a templating engine like Jinga, opens up a lovely world of having human-friendly interfaces on top of my repos that I want to share.  The complexity of the sites can get quite intricate — to my hearts content.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sitegenpost/my_webjeda_main.png&quot; alt=&quot;My personal webjeda cards site&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;b&gt;Usage of the Jekyll Webjeda theme for a course listing site&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Markup languages like Markdown are pretty easy to write in and create text files with headings, lists, tables and such (GitHub made a nice guide &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;here&lt;/a&gt;).  However, if you like reStructuredText or HTML better there are generators out there for you.&lt;/p&gt;

&lt;p&gt;There’s a great site to shop for a Jekyll theme (where I began this journey), &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;here&lt;/a&gt;.  They are mostly slanted towards blog writers as that was the reason for the genesis of Jekyll by the founder of GitHub (thanks Tom Preston-Werner!  Find out more about Jekyll on &lt;a href=&quot;https://www.smashingmagazine.com/2015/11/static-website-generators-jekyll-middleman-roots-hugo-review/#jekyll&quot;&gt;this&lt;/a&gt; blog).&lt;/p&gt;

&lt;p&gt;There is of course the use of GitHub Pages to simply render the repo’s README markdown file by clicking on &lt;strong&gt;Settings&lt;/strong&gt; and scrolling down to &lt;strong&gt;GitHub Pages&lt;/strong&gt;, then selecting a theme directly at that point.&lt;/p&gt;

&lt;p&gt;Basically, I’m just scratching the surface here on another way.  Also, the generators I chose all look good on hand-held devices - an important aspect to consider.&lt;/p&gt;

&lt;p&gt;These are some scenarios for the site generators I’m introducing based on research and actual work I’ve done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Chalk&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Blogs&lt;/li&gt;
      &lt;li&gt;Things listed by dates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Webjeda Cards&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Blogs&lt;/li&gt;
      &lt;li&gt;Portfolios&lt;/li&gt;
      &lt;li&gt;Modular presentations e.g. product cards&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MkDocs&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Documentation&lt;/li&gt;
      &lt;li&gt;Guides or tutorials&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the following information, hopefully you can begin to successfully build sites based on these generators.  I hope to fork them at some point for contributing back and encourage you to do so if you figure out something useful.&lt;/p&gt;

&lt;p&gt;Clarification on project setups:  some themes or static site generators that use repositories for content, have a branch for building the site (source) and a branch (usually called &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;) for the sites deployment files (MkDocs sites do this).  Some themes just work under &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; or have a mirrored dev branch.&lt;/p&gt;

&lt;h3 id=&quot;chalk&quot;&gt;Chalk&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/sitegenpost/chalk_main.png&quot; alt=&quot;Chalk screenshot&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;b&gt;Chalk demo site&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Chalk is a high quality, completely customizable, performant and 100% free blog template for Jekyll.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Creator’s Profile:  &lt;a href=&quot;https://github.com/nielsenramon&quot;&gt;https://github.com/nielsenramon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chalk is my favorite Jekyll theme for blogging.  It’s simple and clean in its look.  However, Chalk doesn’t support the standard way of working with Jekyll on GitHub pages due to custom plugins.  There’s a little bit more complexity around building the site with these plugins, but all of the scripts are provided so it’s actually quite easy in the long run to build and deploy to GitHub Pages or another hosting service.&lt;/p&gt;

&lt;p&gt;Check out these sites:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://chalk.nielsenramon.com/&quot;&gt;Demo site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nielsenramon/chalk&quot;&gt;Chalk GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recommended tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use the dark code highlighting theme inside of the light Chalk theme for a Sublime Editor-like effect.  Modify an import at the bottom of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/_assets/stylesheets/light.scss&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @import &quot;modules/highlights-dark&quot;;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add an icon to the post listing page (main page) by editing the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; tag:&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;article-list-tags&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post logo&quot;&lt;/span&gt; 
       &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; 
       &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30%&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/img&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;And adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;post.logo&lt;/code&gt; to the YAML heading on the post as in:&lt;/p&gt;

    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ---
 ...
 comments: true
 description: A short chatterbot dev story
 logo:  &quot;../resources/images/ocrbot_local.png&quot;
 tags:
 ...
 ---
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/sitegenpost/my_chalk_main.png&quot; alt=&quot;Chalk screenshot my site&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;b&gt;A tweaked Chalk-based site with icons on main page&lt;/b&gt;&lt;/p&gt;

&lt;h3 id=&quot;webjeda-cards&quot;&gt;Webjeda Cards&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/sitegenpost/webjeda_main.png&quot; alt=&quot;Webjeda screenshot&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;b&gt;Webjeda demo site&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Webjeda Cards is a Bootstrap based jekyll theme for portfolio, photography or any kind of blog.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Creator’s Profile:  &lt;a href=&quot;https://github.com/sharu725&quot;&gt;https://github.com/sharu725&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Jekyll theme is fantastic for more modular postings (like course or product listings).  It could also be a great place to show off your work like photos you’ve taken with a nice write-up.  Perhaps, this could be the main page of your site and you could link to all of the repos you’d like to share from this card layout design.&lt;/p&gt;

&lt;p&gt;Setup note:  you can of course simply use the master branch here for building &lt;em&gt;and&lt;/em&gt; deploying, but it’s always nice to have a separate branch we often see called &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; for the sites actual deployed content.&lt;/p&gt;

&lt;p&gt;Check out these sites:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://webjeda.com/cards/&quot;&gt;Demo site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sharu725/cards&quot;&gt;Webjeda Cards GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recommended tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; added a variable to automatically pull in the “Read” button name (so, instead of just “Read” it’s a custom label on the button).  This is done with the &lt;code class=&quot;highlighter-rouge&quot;&gt;post.label&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;panel-title pull-left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-meta pull-right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;small&amp;gt;&amp;lt;/small&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/jekyll-slender-template&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-primary btn-sm pull-right mt10&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Go to &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, in the post you’ll have a YAML header with a &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt; variable like:&lt;/p&gt;

    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ---
  layout: post
  title:  Microsoft R Server and SQL Server R Services Labs
  categories: mrs
  img: hikeclouds.jpg
  label: Labs
  resource:
  ---
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mkdocs&quot;&gt;MkDocs&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/sitegenpost/my_mkdocs_main.png&quot; alt=&quot;MkDocs screenshot&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;b&gt;Docs for one of my projects using the readthedocs theme&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MkDocs is a fast, simple and downright gorgeous static site generator that’s geared towards building project documentation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Creators’ profile:  &lt;a href=&quot;https://github.com/mkdocs&quot;&gt;https://github.com/mkdocs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a great alternative to a Sphinx build for a readthedocs style documentation page.  It’s very easy to setup and use.  There are other builtin themes as well.  It’s fairly pre-baked, but very good for what it’s good for.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mkdocs.org/#mkdocs&quot;&gt;Documentation for MkDocs&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Jun 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/06/18/my-new-static-site-generator-hobby.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/06/18/my-new-static-site-generator-hobby.html</guid>
        
        <category>web-dev</category>
        
        
      </item>
    
      <item>
        <title>How I Became a Data Scientist Part 1</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TL;DR&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/a&gt;:  My path into data science involved dabbling in a new programming language, stalking GitHub for a popular machine learning package, doing some networking and finding some other people to teach.&lt;/p&gt;

&lt;p&gt;Last week, I had the amazing opportunity of co-presenting a talk called “Navigating the AI Revolution” at Microsoft’s developer conference, //build 2017.  I spoke about questions we can answer with machine learning and mentioned a little bit about &lt;strong&gt;my path into data science&lt;/strong&gt;.  Afterwards, many folks approached me about this path and asked for some more guidance and advice.  I thought I’d begin by expanding on my story of how I started out.  My hope is that something in here is helpful to you.&lt;/p&gt;

&lt;p&gt;Before I was a data scientist I was a developer.  TBH I’m now a developer again and getting to do more data science than ever before.  One of my favorite articles of late states that the real prerequisite for machine learning is not math, but rather &lt;strong&gt;data analysis&lt;/strong&gt; skills like data viz and wrangling (link &lt;a href=&quot;https://www.r-bloggers.com/the-real-prerequisite-for-machine-learning-isnt-math-its-data-analysis/&quot;&gt;here&lt;/a&gt;).  But what’s next, i.e., how did I begin actually learning data science…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip:  Start doing data visualization and/or data cleaning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the beginning, this historic tweet by Josh Wills was both funny and helpful to me – giving me perspective.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/becomedatascientist/datascientistdef.png&quot; alt=&quot;Data Scientist (n.): Person who is better at statistics than any software engineer and better at software engineering than any statistician.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before I presented on AI to 700 people at //build, before I taught an ML package at a workshop, before I had read docs and gone through the tutorials and before I had trolled YouTube for ML videos, I had attended the Open Data Science Conference in the Fall of 2015.  &lt;strong&gt;I networked, as we do&lt;/strong&gt;, and met a group of devs/data scientists/physicists/biologists interested in data science like me (a great, diverse group of super smart people!) and immediately got involved in a Python workshop group (GitHub &lt;a href=&quot;https://github.com/PythonWorkshop&quot;&gt;organization&lt;/a&gt;).  I got asked to help them give a workshop on ML, scikit-learn and tensorflow they were planning for the following year because I had a some basic Python materials they could use.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip:  Network with those in your field interested in data science&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of what I had learned was from one single package, &lt;strong&gt;scikit-learn&lt;/strong&gt; which I chose based on its popularity and GitHub activity.  I also studied videos on scikit-learn like &lt;a href=&quot;https://www.youtube.com/watch?v=HC0J_SPm9co&quot;&gt;this&lt;/a&gt; one by Jake VanderPlas and &lt;a href=&quot;https://www.youtube.com/watch?v=oGqGxvqA9-k&quot;&gt;this&lt;/a&gt; one by Olivier Grisel.  After some YouTube’ing and reading the docs, plus talking about it with other data scientists in my workshop-planning group, &lt;strong&gt;I was ready to teach the basics to others&lt;/strong&gt;.  The old adage is true, &lt;em&gt;the best way to learn is to teach&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Scikit-learn is a Python machine learning library with incredible docs that not only explain the package, &lt;strong&gt;actually taught me something useful&lt;/strong&gt; once I had watched a couple of basic videos like the ones just mentioned (check out &lt;a href=&quot;http://scikit-learn.org/stable/tutorial/basic/tutorial.html&quot;&gt;this&lt;/a&gt; page from the docs).  The development of this package is now led by Andreas Müller, a lecturer at the Data Science Institute at Columbia University.  He’s also a big proponent of women as contributors to scikit-learn and open source, openly encouraging more and more to contribute.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip:  Pick a package to learn that is popular and active&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In May of 2016, I &lt;strong&gt;co-instructed&lt;/strong&gt; a workshop (close to 200 folks, mostly women) at a Google office in Mountain View, CA.  They thought it was funny when I said “I’m now in the belly of the beast” (I’m a Microsofty).  I was still a new data scientist, but I knew how to use a powerful ML tool to understand some simple data (the &lt;a href=&quot;https://en.wikipedia.org/wiki/Iris_flower_data_set&quot;&gt;iris dataset&lt;/a&gt;) and could communicate that to others.&lt;/p&gt;

&lt;p&gt;I didn’t start out teaching or creating courses by any means.  I started out by being curious about analytics, for many years doing genomics and proteomics.  I started dabbling in Python as necessary and a little R for my analyses and visualizations.  I chose to write some teaching material because I wanted to learn Python better (you can start out small even with a readme or two on GitHub) and off I went.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tip:  Pick a language like R or Python and plan to create some training material on something analytical for work or fun&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All of this certainly required experience in a new language, Python, adopted by the data science community along with R as the go-to programming language for its intuitive syntax, readability, and existing math libraries, among other reasons.  I had been dabbling in Python for a few years, doing basic math and web programming.  I really grokked Python, however, after I had &lt;strong&gt;created a Python course of my own&lt;/strong&gt; (find it &lt;a href=&quot;https://notebooks.azure.com/rheartpython/libraries/PythonDS101&quot;&gt;here&lt;/a&gt;) — see a theme here? :)&lt;/p&gt;

&lt;p&gt;In Part 2, I will expand on diving into ML and more tidbits on learning data science.&lt;/p&gt;

</description>
        <pubDate>Mon, 15 May 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/05/15/data-science-story-part1.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/05/15/data-science-story-part1.html</guid>
        
        <category>data-science</category>
        
        <category>narrative</category>
        
        
      </item>
    
      <item>
        <title>Wading In a Tide Pool of Choices, How to Write a Package in Python?</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TL;DR&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/a&gt;:  There’s more than one way to create the structure and setup the project, but we start with a name and a magical file called &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’ve pulled from several sources (see Resources below) and have mashed them together to create a brief synopsis of what I plan on doing for my first python package.  I thought I’d share these findings with you.  I’ve tried to be python 2/3 agnostic as needed.&lt;/p&gt;

&lt;p&gt;To make the most barebones package we can use the following structure (if we include the right code in &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; this could be a &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; installable package in no time!).  &lt;code class=&quot;highlighter-rouge&quot;&gt;coolname_project&lt;/code&gt; is the GitHub repo name and what I refer to as the base folder.  This is the structure of our barebones package:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;coolname_project
    coolname/
        __init__.py
    setup.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An example of a more common structure I’ve seen:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;coolname_project
    coolname/
        __init__.py
        somecoolmodule.py
        command_line.py
        test/
            test_somecoolmodule.py
            test_command_line.py
    docs/
        greatdoc.txt
    bin/
        runsomestuff.sh
    examples/
        snippet.py
    setup.py
    README
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep reading to find out what goes in these folders and files.&lt;/p&gt;

&lt;h3 id=&quot;a-very-quick-example-of-a-barebones-package&quot;&gt;A very quick example of a barebones package&lt;/h3&gt;

&lt;p&gt;To &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; add this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can use our brand new package in python:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;import coolname
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;coolname.foo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; (more should go here and we’ll see in a bit, but this is barebones right now):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;setuptools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'coolname'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'The coolest package around'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'http://github.com/&amp;lt;your username&amp;gt;/coolname_project'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Your Name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;author_email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name@example.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MIT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'coolname'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;zip_safe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; with certain info allows us to be able to do an awesome thing: &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install&lt;/code&gt; our package (here, locally).  In our base package folder just type:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Congrats!  You have an awesome, little package (although it doesn’t do anything very cool yet - that’s up to you!).&lt;/p&gt;

&lt;p&gt;Note:  the &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; is a powerful tool and will likely contain much, much more like dependency specifications, more metadata around the package, entry points, testing framework specs, etc.&lt;/p&gt;

&lt;h3 id=&quot;read-onthe-dual-purpose-readme&quot;&gt;Read on…the dual-purpose README&lt;/h3&gt;

&lt;p&gt;Don’t you just love reusability?&lt;/p&gt;

&lt;p&gt;If we write our README in reStructuredText format it not only will look good on GitHub, it’ll serve as the &lt;code class=&quot;highlighter-rouge&quot;&gt;long_description&lt;/code&gt; or detailed description of our package on PyPi.  To make sure this happens we need a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;MANIFEST.in&lt;/code&gt; as well.  &lt;code class=&quot;highlighter-rouge&quot;&gt;MANIFEST.in&lt;/code&gt; also does some more useful things (see Jeff Knupp’s article in Resources below).&lt;/p&gt;

&lt;p&gt;So, we could, for example, have in our &lt;code class=&quot;highlighter-rouge&quot;&gt;README.rst&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The Coolest Package Ever
--------

To use (with caution), simply do::
    &amp;gt;&amp;gt;&amp;gt; import coolname
    &amp;gt;&amp;gt;&amp;gt; coolname.foo()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The in our &lt;code class=&quot;highlighter-rouge&quot;&gt;MANIFEST.in&lt;/code&gt; (this file does other things down the road, but for now we’ll use it to include our README):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include README.rst
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;summary-of-the-folderfiles-in-a-package&quot;&gt;Summary of the folder/files in a package&lt;/h3&gt;

&lt;p&gt;This is what I’ve gleaned so far from guides.&lt;/p&gt;

&lt;h4 id=&quot;basics&quot;&gt;Basics:&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coolname/&lt;/code&gt; — the source folder with sub-modules (e.g. sub-module file called &lt;code class=&quot;highlighter-rouge&quot;&gt;dosomething.py&lt;/code&gt;) and containing an &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file (usually empty, but req’d for installation)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coolname/test/&lt;/code&gt; — package folder to hold tests; place files that begin with “test” such as &lt;code class=&quot;highlighter-rouge&quot;&gt;test_dosomething.py&lt;/code&gt; so that programs like &lt;a href=&quot;http://doc.pytest.org/en/latest/contents.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt;&lt;/a&gt; can find them and execute.&lt;/p&gt;

&lt;p&gt;NOTE:  There’s an alternative test folder structure where the test-containing folder is named &lt;code class=&quot;highlighter-rouge&quot;&gt;tests&lt;/code&gt; (plural) and placed at the base of the package (with &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt;) - check out &lt;a href=&quot;http://doc.pytest.org/en/latest/goodpractices.html&quot;&gt;this&lt;/a&gt; doc on &lt;code class=&quot;highlighter-rouge&quot;&gt;pytest&lt;/code&gt;‘ing and folder structures.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; — script to install/test the package and provide metadata (e.g. the long_description for PyPi) - necessary to have a &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; installable package.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; — basic information on the package, how to use, how to install, etc.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; - executables folder (non-py files)&lt;/p&gt;

&lt;h4 id=&quot;often-included&quot;&gt;Often included:&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docs/&lt;/code&gt; — documentation folder for the package (as .txt, .md, etc. — need to indicate this folder in &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; if you want it in distribution)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;examples/&lt;/code&gt; - a folder with some samples and code snippets of package usage&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/&lt;/code&gt; — folder for command line tools like entry points (e.g. with a &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; — a file sometimes included for running the unit tests and more&lt;/p&gt;

&lt;p&gt;Note:   if there’s only one file containing all the source code you can skip creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;/coolname&lt;/code&gt; project folder with the &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; and just place the source code file in the base directory.&lt;/p&gt;

&lt;h3 id=&quot;references-and-places-to-go-for-more&quot;&gt;References and places to go for more&lt;/h3&gt;

&lt;p&gt;Check out the python-packaging guide which walks you through pip-friendly package creation &lt;a href=&quot;https://python-packaging.readthedocs.io/en/latest/&quot;&gt;here&lt;/a&gt; (although it’s targeted for python 2).&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/&quot;&gt;Open Sourcing a Python Project the Right Way&lt;/a&gt; for a detailed package dev workflow with tons of sample code and great explanations by Jeff Knupp.&lt;/p&gt;

&lt;p&gt;Jake VanderPlas has a great blog post with videos talking about writing python packages and testing with PyTest among other things &lt;a href=&quot;http://jakevdp.github.io/blog/2017/03/03/reproducible-data-analysis-in-jupyter/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://as.ynchrono.us/2007/12/filesystem-structure-of-python-project_21.html&quot;&gt;do’s and don’ts here&lt;/a&gt; for a quick “do/don’t-do” synopsis around packaging in python by Jean-Paul Calderone.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/03/06/two-cents-on-python-package-structure.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/03/06/two-cents-on-python-package-structure.html</guid>
        
        <category>python</category>
        
        <category>dev</category>
        
        
      </item>
    
      <item>
        <title>OCRBot Gets Attached</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TL;DR&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/a&gt;:  Chatterbots are trending bigtime!  Here, we continue the story of OCRBot, a word recognizing chatbot.  OCRBot’s new ability to get image text from attachments is revealed (adding to it’s existing ability to take image web links).  So, we can snap a picture of some text and OCRbot finds the words.  This could lead us into even more exciting realms like text to speech or translation.&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;&lt;b&gt;For OCR, commonly a k-nearest neighbors classifier is used for character recognition&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;For the first two stories, see &lt;a href=&quot;https://michhar.github.io/posts/how-to-bot-on-mac&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;https://michhar.github.io/posts/ocrbot-makes-a-connection&quot;&gt;Part 2&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;whats-the-wow-factor&quot;&gt;What’s the wow factor?&lt;/h3&gt;

&lt;p&gt;Have you ever just wanted the text extracted from, perhaps a page in a book or a funny comic that’s sitting around in an image?  Or maybe it’d be helpful to take a snapshot of a menu item wherein the font is a bit too small or you forgot your reading glasses, however, it’s easy to read on your phone as plain text. Now, if you send the OCRBot an image (jpeg, png, gif, bmp are its known formats), on one of its supported conversational platforms like Skype or Slack, you’ll get that text you crave.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/bot_part3/ocrbot_skype.jpg&quot; alt=&quot;ocr bot with my coaster&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;&lt;b&gt;OCRBot on Skype - using a photo I just took of my favorite coaster sitting on my coffee table currently&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is not only fun and useful it could be the precursor to adding text to speech, or TTS, to the bot itself as we’ve got a Cognitive Servies API for that (Bing Speech).  You can, of course at this point even, pipe this text into one of your TTS apps already on your device.&lt;/p&gt;

&lt;h3 id=&quot;reintroducing-ocr&quot;&gt;(Re)Introducing OCR&lt;/h3&gt;

&lt;p&gt;OCR, or optical character recognition, is the electronic or mechnanical recognition of text in images and the conversion into machine-encoded representaions.  The text could be handwritten, typed or printed.  The data is an image such as scanned passports or financial data, business cards, postal mail, or any document as an image that someone wishes to digitize.&lt;/p&gt;

&lt;p&gt;Sometimes, OCR uses the human mind as the intelligence algorithms.  An example is the use of reCAPTCHA as a crowdsourcing effort for a two-fold purpose:  verification that the entity logging in somewhere is not a bot and crowdsourcing the recognition of hard to read text for the archiving of say 13 million articles from the NY Times starting with articles from 1851 which was accomplished in 2011 along with all of the books on Google Books.&lt;/p&gt;

&lt;p&gt;OCR is performed through &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pattern_recognition&quot;&gt;pattern recognition&lt;/a&gt;&lt;/strong&gt; with components often pulled from AI and computer vision.  The process usually takes the form of:  pre-processing (fixing skew, noise reduction, conversion to black-and-white, and the like) - see figure below; character or word recognition through feature extraction and, often, a k-nearest neighbors classification (see figure below), one of the simplest of ML algorithms; post-processing such as validation through seeing co-occurrences of words (words that usually go together like “ice cream” instead of “ice pizza”).  See the &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;Wikipedia article on OCR&lt;/a&gt; for more.&lt;/p&gt;

&lt;p&gt;In the Cognitive Services OCR, we have the idea of word detection within bounding boxes, combining pre-processing and several ML algorithms such as the feature extraction mentioned above, another set of algorithms for classification (including convolutional neural networks) and validation through simillar means as above, plus using a vocabulary and other techniques.&lt;/p&gt;

&lt;p&gt;Pre-processing example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/bot_part3/pre_process.jpg&quot; alt=&quot;pre-processing example&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;&lt;b&gt;An example of image pre-processing for character recognition:  fixing skew, binarisation, despekling, and line removal&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;k-nearest neighbor example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/bot_part3/knn_mharris_letters.jpg&quot; alt=&quot;k-nearest neighbors example&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;&lt;b&gt;Classifying the orange letter as a blue D or green P.  Note, that if k is 3, the orange letter is classified as a blue D, but with a k of 7 it is classified as a green P.  The structure of the data can cause for a tricky problem in k-NN&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Nowadays, especially on devices like smart phones, the OCR model used to do this conversion to text is done in the cloud through an API.  This is how the Computer Vision API for OCR under the Cognitive Services umbrealla on Azure gets it done.&lt;/p&gt;

&lt;p&gt;And for those who like a little history, note that OCR was known to be used in devices as early as 1914 with Emanuel Goldberg’s invention of a machine that could read characters and convert them into standard &lt;a href=&quot;https://en.wikipedia.org/wiki/Telegraph_code&quot;&gt;telegraph code&lt;/a&gt; like Morse code (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;this Wikipedia&lt;/a&gt; article for more history).  Skip ahead to today and we have optical word recognition (commonly called OCR) used for typewritten text and others like intelligent character recognition (ICR) for handwritten or cursive text.&lt;/p&gt;

&lt;h3 id=&quot;how-has-ocrbots-code-changed&quot;&gt;How has OCRBot’s code changed&lt;/h3&gt;

&lt;h4 id=&quot;from-the-original-ocrbot&quot;&gt;From the original OCRBot&lt;/h4&gt;

&lt;p&gt;OCRBot began with the ability to take a web link of an image with text and give us back the actual text in &lt;a href=&quot;https://michhar.github.io/posts/how-to-bot-on-mac&quot;&gt;Post 1&lt;/a&gt;.  Now we’ve updated OCRBot quite a bit to also accept images as attachments to the conversation.&lt;/p&gt;

&lt;p&gt;Simply check out the &lt;code class=&quot;highlighter-rouge&quot;&gt;server.js&lt;/code&gt; at github link &lt;a href=&quot;https://github.com/michhar/bot-education-ocrbot&quot;&gt;here&lt;/a&gt; for the new changes to OCRBot of which there are quite a few.  Certainly an overhaul of sorts, one of which was the incorporation of promises…&lt;/p&gt;

&lt;h4 id=&quot;a-promise&quot;&gt;A Promise…&lt;/h4&gt;

&lt;p&gt;What is a Promise?  Let’s start with a promise of a promise that I like (ok, I had to go there) from an article by Marc Harter found &lt;a href=&quot;https://strongloop.com/strongblog/promises-in-node-js-an-alternative-to-callbacks/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Promises are a compelling alternative to callbacks when dealing with asynchronous code. […] Callbacks are the simplest possible mechanism for asynchronous code in JavaScript. Unfortunately, raw callbacks sacrifice the control flow, exception handling, and function semantics familiar from synchronous code. Promises provide a way to get those things back.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See &lt;a href=&quot;https://en.wikipedia.org/wiki/Parallel_computing&quot;&gt;this&lt;/a&gt; article if you are unfamiliar with the meaning of asychronous.&lt;/p&gt;

&lt;p&gt;Key concepts (don’t worry if this doesn’t quite make sense yet) of a promise are as follows (paraphrased from info in Harter’s article).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;promise&lt;/code&gt; (one way to think about them), is a value representing an asynchronous operation that is only fufilled once, either being resolved or rejected (we’ll see in code soon).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, a reserved word for promises, allows anyone with access to the promise to be able to consume it &lt;em&gt;regardless of if the asynchronous operation is done or not&lt;/em&gt;.  One way to think about them is as a function which unwraps the asynchronous operation’s result from the promise.  &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; returns a promise.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; is often used after a &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, series of &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;s, or some nested &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;s to handle errors both implicitly and explicitly if the ned arises.&lt;/li&gt;
  &lt;li&gt;We can still use &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; to model syncrhonous functions by returning a promise or any other value that and then signaling the next &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;, possibly giving this value to the next &lt;code class=&quot;highlighter-rouge&quot;&gt;onFufilled&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onFufilled&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;onRejected&lt;/code&gt; are the callbacks and handlers that &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; handles to signal what to do with the results of a promise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a simple representation in code of the logic changes a promise provides.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this example, &lt;code class=&quot;highlighter-rouge&quot;&gt;readFile&lt;/code&gt; does, in fact, need to return a promise.  This object can now be used with any &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; that has access to the promise.  You’ll notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; has two bits to it.  If the promise is fufilled in &lt;code class=&quot;highlighter-rouge&quot;&gt;readFile&lt;/code&gt; the first (&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt;) chunk of code is called, and if rejected, the second chunk is called (&lt;code class=&quot;highlighter-rouge&quot;&gt;console.error&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We can create raw promises in the following way.  In this example, we are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;fs&lt;/code&gt; library’s &lt;code class=&quot;highlighter-rouge&quot;&gt;readFile&lt;/code&gt; method, using &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; to pass on the result of the promise in the case of an error, and &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; if it is fufilled or simply not rejected, wrapping all of this up in a function which returns the promise to be used by a &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;.  Then, the next &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; that consumes this promise-returning function “unwraps” that logic.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readFileAsync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// rejects the promise with `err` as the reason&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// fulfills the promise with `data` as the value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;readFileAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myfile.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In a similar way, the OCRBot’s code now includes promises and this looks like the raw promise above with the clever use of a &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; to catch any unhandled errors and give some information back to the app and user.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileDownload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkRequiresToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestWithToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contentUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request_promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contentUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;fileDownload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;nx&quot;&gt;readImageText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attachment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extractText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error with attachment: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                        &lt;span class=&quot;na&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Error with attachment or reading image with %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Promises are quite amazing, leading to resolving many issues around Node.js code such as too many nested callbacks (aka “callback hell”) and clean error handling.  I hope you got a bit of that enthusiasm from reading through this section.&lt;/p&gt;

&lt;h3 id=&quot;the-end-of-this-chapter-and-ocrbots-next-adventure&quot;&gt;The end of this chapter and OCRBot’s next adventure&lt;/h3&gt;

&lt;p&gt;I’m actually not sure what will be in store for OCRBot next.  There are so many fantastic “smarts” we could add or clever functionality.  It’ll have to wait and be revealed when OCRBot returns to this blog.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/bot_part3/ocrbot_attached.jpg&quot; alt=&quot;happy bot&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/03/01/ocrbot-gets-attached.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/03/01/ocrbot-gets-attached.html</guid>
        
        <category>bots</category>
        
        <category>dev</category>
        
        
      </item>
    
      <item>
        <title>The Notebook Superhero -- Is It Always a Contest?</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TL;DR&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/a&gt;:  Once you learn how to use one kind of notebook system, the knowledge will transfer easily to another.  Here, we’re discussing two, Jupyter and Beaker.  Because Jupyter is much more mature of a project, it’d probably be the best place to start.  But for those with that extreme sense of adventure and/or use Python 2 a lot with other languages, give the Beaker notebooks a chance.  Loads of potential for data scientists there.&lt;/p&gt;

&lt;h3 id=&quot;whats-a-notebook&quot;&gt;What’s a notebook?&lt;/h3&gt;

&lt;p&gt;Have you ever taught programming and wished to have the class notes, sample code and exercises with instructions all in one place?  Have you ever heavily commented your code and wished it was more readable?  Have you used R Markdown and wished to run individual code chunks with only a button or keyboard shortcut?  Have you ever wished to use multiple programming languages in the same place, same document?&lt;/p&gt;

&lt;p&gt;So, the story begins with my wish for a better way.  When I discovered notebooks, at first, I felt strange programming in a browser until I discovered I could annotate the code with pleasant, easy-to-read text and for some reason that opened up a whole world.  I began documenting my research work more, creating clear and rich teaching aids, and enhancing my work to share with others in a reproducible way or at least with clear instructions and notes in nice looking text rather than sometimes hard-to-read comments within the code (which I still do of course).  It was the annotations that made it worth my time to learn.&lt;/p&gt;

&lt;p&gt;There are several notebook systems out there and they all seem to behave, at their core, the same way in that I can run interactive code cells and document my work in pleasant-to-read formats.  They do vary in their use cases, such as RStudio’s notebook being more geared towards the R programmer (although it has extension packages for other languages now) or the Beaker notebooks for combining multiple languages into a workflow.  A sample of notebook “providers” is as follows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://beakernotebook.com/&quot;&gt;Beaker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zeppelin.apache.org/&quot;&gt;Zeppelin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://spark-notebook.io/&quot;&gt;Spark&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jupyter.org/&quot;&gt;Jupyter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jupyterlab/jupyterlab&quot;&gt;Jupyterlab&lt;/a&gt; (preview)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rmarkdown.rstudio.com/r_notebooks.html&quot;&gt;RStudio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;and more&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introducing-our-players&quot;&gt;Introducing our players&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Beaker&lt;/strong&gt;, a polyglot notebook system, is based on IPython (amongst other things) and &lt;strong&gt;Jupyter&lt;/strong&gt;, supporting over 40 programming languages, is based on IPython (amongst other things).  They both allow multiple languages from within the same notebook and both run on top of Python.  I found I was able to install either one without the command line so they seemed pretty easy to get going on (Jupyter did require one command in the terminal to start which was a simple task).&lt;/p&gt;

&lt;p&gt;They are both open source projects and being built on IPython have similar notebook interfaces so it’d be easy to switch over from one to another once you get the hang of notebooks.&lt;/p&gt;

&lt;p&gt;Differences and distinguishing factors discussed below.&lt;/p&gt;

&lt;h3 id=&quot;jupyter--customizable-and-sometimes-magic&quot;&gt;Jupyter:  customizable and sometimes magic&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/jupyter_beaker/jupyter_grade3theme.png&quot; alt=&quot;jupyter with a grade3 theme&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;b&gt;A Python 3 flavored Jupyter notebook with a &quot;grade3&quot; theme (theme from Kyle Dunovan's jupyter-themes repo)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The Jupyter project is much more mature than the Beaker project and thus has a reliable and almost totally bug-free experience (nothing is completely bug-free).  It’s pretty much the classic notebook system, but gives the us the ability to use it for reproducible research, publish papers, do presentations with live code, create blogs (not this one, although it’s in markdown at least), and the list goes on.  It’s a mature project with many add-ons and features available.&lt;/p&gt;

&lt;p&gt;Returning to basecamp, Jupyter notebook setups can be simple and basic, one language supported and the basic theme, or much more complex, supporting several languages chosen from a drop-down menu and having extensions to check spelling and perhaps a custom theme to pretty it up.  Out of the box, they simply work with the default Python.  It’s a very transparent system.  What you add on is done by you, but you must take care of what that add-on requires.  Jupyter notebooks are meant to be simple, useful and clean (I’ve seen and made many of messes so I aim for this).&lt;/p&gt;

&lt;p&gt;An Anaconda install gives us Jupyter notebooks automatically.  Whichever is the default Python, becomes the default Python version for the notebook (basically whatever is first in our PATH if we have 2 and 3).  We could also install with &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;, Python’s package manager.&lt;/p&gt;

&lt;p&gt;Jupyter, when using the python kernel, can incorporate “magics” or other languages within the same notebook (and sometimes passing variables back and forth like with R kernel and rpy2 or javascript).  Some cell magics are listed here (the “%%” is literally the syntax we use in a notebook cell to designate):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;%%fortran&lt;/li&gt;
  &lt;li&gt;%%cython&lt;/li&gt;
  &lt;li&gt;%%javascript&lt;/li&gt;
  &lt;li&gt;%%html&lt;/li&gt;
  &lt;li&gt;%%bash&lt;/li&gt;
  &lt;li&gt;%%latex&lt;/li&gt;
  &lt;li&gt;%%perl&lt;/li&gt;
  &lt;li&gt;%%python2&lt;/li&gt;
  &lt;li&gt;%%python3&lt;/li&gt;
  &lt;li&gt;%%ruby&lt;/li&gt;
  &lt;li&gt;%%R&lt;/li&gt;
  &lt;li&gt;others (incl. incubator projects like &lt;a href=&quot;https://github.com/jupyter-incubator/sparkmagic&quot;&gt;sparkmagic&lt;/a&gt;, which created magics within it, in the context of working with spark clusters)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These languages, of course, must be on the system hosting the notebook.  In addition, the Jupyter project reports over 40 languages supported, but this does not mean they all have magics and can be run from an IPython notebook (IPython, here, referring to the Python kernel, but it can also refer to a previous Python notebook project).  Also, custom kernels for languages not supported can be made according to the Jupyter docs.&lt;/p&gt;

&lt;p&gt;One customization I really love is &lt;code class=&quot;highlighter-rouge&quot;&gt;nbextensions&lt;/code&gt; (more &lt;a href=&quot;https://github.com/ipython-contrib/jupyter_contrib_nbextensions&quot;&gt;here&lt;/a&gt;) which adds functionality to a Jupyter notebooks such as a table of contents, section numbering, highlighting, and spellcheck to name a few.  Personally, I found the TOC and spellcheck very, very useful as I get lost easily and spell quite horribly.&lt;/p&gt;

&lt;p&gt;Another customization is around adding a theme, but more on that below.&lt;/p&gt;

&lt;p&gt;A really nifty meta-feature is that GitHub renders static versions of IPython/Jupyter notebooks (.ipynb files which are just JSON) which makes viewing your work and the work of others very easy from GitHub.&lt;/p&gt;

&lt;p&gt;You can find the Jupyter project on GitHub at &lt;a href=&quot;https://github.com/jupyter/notebook&quot;&gt;https://github.com/jupyter/notebook&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;beaker--a-true-polyglot&quot;&gt;Beaker:  a true polyglot&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/jupyter_beaker/beaker_d3.png&quot; alt=&quot;beaker screenshot&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;right&quot;&gt;&lt;b&gt;Python 2 and JavaScript with D3 sharing variables (entire code sample is in the D3 Demo notebook that comes with Beaker)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;A Beaker notebook is different from a Jupyter notebook in that it can easily pass data from one cell to the next even if the code in each cell is in a different programming language.  This is the &lt;strong&gt;big&lt;/strong&gt; selling point of Beaker notebooks.  Literally, we can share one variable from Python to Javascript, for example, by just prefacing it with &lt;code class=&quot;highlighter-rouge&quot;&gt;beaker.&lt;/code&gt;.  Woah.  This opens up a realm of possibilities.&lt;/p&gt;

&lt;p&gt;Beaker notebooks give us more default functionality and ease-of-use than a Jupyter notebook at the expense of being less transparent.  If all you need is Python 2, they are super easy and very user-friendly.  Also, Beaker starts up with tons of sample code, called Demos, at your fingertips for most if not all of the supported languages.&lt;/p&gt;

&lt;p&gt;Beaker, so far, out-of-the-box, supports* 17 languages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clojure&lt;/li&gt;
  &lt;li&gt;C++&lt;/li&gt;
  &lt;li&gt;Python2 (called IPython by Beaker)&lt;/li&gt;
  &lt;li&gt;Python3&lt;/li&gt;
  &lt;li&gt;R&lt;/li&gt;
  &lt;li&gt;SQL&lt;/li&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
  &lt;li&gt;Scala&lt;/li&gt;
  &lt;li&gt;Node&lt;/li&gt;
  &lt;li&gt;Torch&lt;/li&gt;
  &lt;li&gt;Julia&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;Kdb&lt;/li&gt;
  &lt;li&gt;Groovy&lt;/li&gt;
  &lt;li&gt;HTML&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;TeX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;You still need to have the backend interpreter or compiler (just like in Jupyter) and certain plugins in most cases to connect it up to Beaker.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the origins of Beaker, in their own words…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beaker is built on many fantastic open source projects including Angular, Bootstrap, CometD, Gradle, Guice, IPython, Jackson, Jetty, Nginx, Rserve, and others for which we are very grateful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beaker, too, is open source as a “base” or something to run locally, host oneself, or use with Docker.  You can check it out on their GiHhub repo at:  &lt;a href=&quot;https://github.com/twosigma/beaker-notebook&quot;&gt;https://github.com/twosigma/beaker-notebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Beaker has better notebooks management features (such as listing your open notebooks with time stamps).  The UI looks a bit nicer as well.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aside:  Those who like to see their files listed, however, should try Jupyterlab which feels more like RStudio than a notebook system.  It has nice management features as well, but more around transparency into the file system and has the ability to open different file formats plus a classic interpreter.  It’s out of the scope of this post for sure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And some may not see this tiny little note in a screenshot of a guide for what you can put in the text parts right on their GitHub readme, but they totally mention Donald Knuth, one of my favorite people ever.  +1.&lt;/p&gt;

&lt;h3 id=&quot;installing-it&quot;&gt;Installing it&lt;/h3&gt;

&lt;p&gt;Neither Beaker, nor Jupyter, require the command line for installation.  An install of Anaconda for Python includes Jupyter notebooks.  To run it however, one will need to type &lt;code class=&quot;highlighter-rouge&quot;&gt;jupyter notebook&lt;/code&gt; from the command line, but that’s really it (you can also install Jupyter from the command line with &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The tricky part sometimes for Jupyter is getting other kernels (support for other languages) installed.  But my other &lt;em&gt;de facto&lt;/em&gt; language is R and I simply used the conda compatible &lt;a href=&quot;https://anaconda.org/r/r-essentials&quot;&gt;R-Essentials&lt;/a&gt;, which gives me the R kernel option (Yay!!) (and by far the easiest way to get the R kernel working that I’ve found - see &lt;a href=&quot;https://www.continuum.io/blog/developer/jupyter-and-conda-r&quot;&gt;this&lt;/a&gt; blog for more on R-Essentials).  I gave up getting R to work in Beaker after toying around for an hour or so (granted that wasn’t a long time and smarter folks could probably get it working) running up against an undocumented R package called Rserve, a dependency for R in Beaker.&lt;/p&gt;

&lt;p&gt;It appears Beaker by default expects, as it &lt;a href=&quot;https://github.com/twosigma/beaker-notebook/wiki/Python-Mismatch-Errors&quot;&gt;says here&lt;/a&gt;, a Python 2 conda install (which is weird I thought due to Python 2 becoming a legacy language soon).  So, when I tried it with my Python-3-only conda install, I had bad luck running an IPython cell, although Python 3 cells worked.  I did solve the IPython cell issue according to some pretty easy-to-follow advice on their wiki about specifying the IPython path and adding a Python path pointing to a Python 2 install (in a config file called &lt;code class=&quot;highlighter-rouge&quot;&gt;beaker.pref.json&lt;/code&gt;).  Beaker’s wiki is, in general, very helpful I’ve found thus far.&lt;/p&gt;

&lt;h3 id=&quot;themes--design-can-win-people-over&quot;&gt;Themes:  design can win people over&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/jupyter_beaker/jupyter_basic_js.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;&lt;b&gt;A Jupyter notebook with the `mm_dark_theme` (theme by Milos Miljkovic and found on GitHub)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Out of the box, we get a couple of themes for our notebooks with Beaker,  Default and Ambiance.  With Jupyter, we can add any theme we’d like or like to create in a few ways, but my favorite and simplest is just adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;custom.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;custom.css&lt;/code&gt;  to a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.jupyter/custom/&lt;/code&gt; (create one if it’s not there).  The &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; refers to the user’s base directory, often used in Unix systems.&lt;/p&gt;

&lt;p&gt;For the Jupyter notebook above, I used a dark theme which is found &lt;a href=&quot;https://github.com/miishke/mm_dark_theme&quot;&gt;here&lt;/a&gt;, but you can find them all over place on GitHub.  The installs will vary so I stick with the &lt;code class=&quot;highlighter-rouge&quot;&gt;custom.js&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;mm_dark_theme&lt;/code&gt; project/repository and just switch out the css files (probably not the best practice mind you, but I always give credit to the creators of the css, or stylesheets).&lt;/p&gt;

&lt;p&gt;Yes, the Jupyter method to include a theme is one or two steps more complicated, but it’s truly custom and themes can be important for various reasons, like emphasizing the graphs and text to non-technical folk in a more pleasant background color than white and nicer fonts.  I do have to admit I was pleasantly surprised by having a theme choice in Beaker and then how easy it was to switch them.&lt;/p&gt;

&lt;h3 id=&quot;competition-or-no&quot;&gt;Competition or no?&lt;/h3&gt;

&lt;p&gt;So, is it a competition?  I’d say not so much given we don’t really have an apples to apples situation.  While Beaker may be trying to fill the gaps or make its niche, I’d say it’s in fact creating a whole new experience for data scientists which could be extraordinary if they’d only make some small adjustments (such as make the deployment Python version agnostic).  I hope these two projects, and the others, continue to complement each other and grow even better.&lt;/p&gt;

&lt;h3 id=&quot;questions-i-have-but-didnt-answer-here&quot;&gt;Questions I have, but didn’t answer here&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Do I really need to pass variables from one language to another or are magics in Jupyter sufficient for incorporating the same languages into one notebook?&lt;/li&gt;
  &lt;li&gt;Why would I choose Jupyterlab over Jupyter notebooks?  Is it a step forward or simply a divergence?&lt;/li&gt;
  &lt;li&gt;RStudio does similar things these days and with XRPython we can embed python in a notebook-eqsue environment — and might I add tidyverse.  Why not use that?&lt;/li&gt;
  &lt;li&gt;Which one is the best for Spark?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/02/19/jupyter-and-beaker-make-a-case.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/02/19/jupyter-and-beaker-make-a-case.html</guid>
        
        <category>r</category>
        
        <category>python</category>
        
        <category>notebooks</category>
        
        <category>jupyter</category>
        
        
      </item>
    
      <item>
        <title>Javascript and Python Meet through Magic and IPython</title>
        <description>&lt;h3 id=&quot;a-little-exchange&quot;&gt;A little exchange&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt;:  “I want your silly game to have a starting value of 100 for life points for all players.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Javascript&lt;/em&gt;:  “I read you loud and clear.  Let’s take that starting life and play this silly game.  Alfred and Wallace are on the same side battling orcs.  Alfred decides to give life to Wallace because Wallace appears to be about to bravely charge onto the battle field and may need it.  Done.  That’s all the game can do right now because I just started making it.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Python&lt;/em&gt;:  “Let’s see…oh wow.  Your game code actually worked.  Alfred now has 99 life points and Wallace has 101.  Good job us.”&lt;/p&gt;

&lt;p&gt;I went on a hunt to find the cleanest and most succinct way to pass a variable from Python to Javascript and then back to Python in a Jupyter notebook.  I wanted a proof of principle upon which I could later base my D3 graphics using Python data as &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt; dataframes.&lt;/p&gt;

&lt;p&gt;So, this silly example can be translated into code as follows.&lt;/p&gt;

&lt;p&gt;First, things are actually easy for us because we are in a Jupyter notebook living in a browser, utilizing all sorts of widgets and HTML elements already.  We can tap into that (and actually the DOM) to get some of the functionality we require.&lt;/p&gt;

&lt;p&gt;So, in Python we can use the IPython.display module with the HTML function allowing us to embed an element for later use.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTML&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pystartlife&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;div id='textid'&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pystartlife&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ve created a Python variable, &lt;code class=&quot;highlighter-rouge&quot;&gt;pystartlife&lt;/code&gt;, and embedded it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; element, literally just using raw HTML.  Now we use the Javascript magics (&lt;code class=&quot;highlighter-rouge&quot;&gt;%%javascript&lt;/code&gt;) to create a Javascript coding environment for the next cell.  (BTW there are magics for many more languages - very cool.)&lt;/p&gt;

&lt;p&gt;In the Javascript, now, we grab the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; element with the Python variable from the document or webpage and play our game.  We also write the game.  (This game is based on a &lt;a href=&quot;https://www.youtube.com/playlist?list=PL6gx4Cwl9DGBMdkKFn3HasZnnAqVjzHn_&quot;&gt;Node.js tutorial&lt;/a&gt; by thenewboston on YouTube - thank you Bucky!).&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Get the python variable from the DOM&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startlife&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'textid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Define a User class with a method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startlife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;giveLife&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;giveLife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;targetPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Use class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Alfred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Wallace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Names were blank so give them name values&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Alfred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Alfred'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Wallace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Wallace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Let's play a game!&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Let Alfred give life to Wallace&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Alfred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;giveLife&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Wallace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Save these variables back to python variables to work with later&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IPython&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notebook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Alfred_life=&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Alfred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;IPython&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;notebook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Wallace_life=&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Wallace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&quot;;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We grab the Python variable now embedded with &lt;code class=&quot;highlighter-rouge&quot;&gt;document.getElementById('idname').innerHTML&lt;/code&gt;, a DOM function and attribute which grabs the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; by its &lt;em&gt;id&lt;/em&gt; (not name) and takes what is in the text part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we define a class in Javascript that contains an altruistic method for giving life.  We create some users and give them names.  We then “play” the game and allow one to give life to another with the method in the User class - how generous of Alfred!&lt;/p&gt;

&lt;p&gt;Lastly, the lovely magic part, we use this sneaky Javascript function from the IPython class that executes Python statements.  We could execute any Python statement really in this way, e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;IPython.notebook.kernel.execute('print(&quot;Hello World!&quot;)');&lt;/code&gt;  We include our life values (Javascript variables) into this executable string and, well, execute it.&lt;/p&gt;

&lt;p&gt;And to see if the magic worked, we run a simple couple of print statements back in Python:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alfred_life&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wallace_life&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With low and behold and output of:  99 and 101.  Way to pay it forward, Alfred!&lt;/p&gt;

&lt;p&gt;You can find this code and more in &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/general/Jupyter_and_JavaScript.ipynb&quot;&gt;this&lt;/a&gt; Jupyter notebook.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Feb 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/02/18/javascript-and-python-have-a-party.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/02/18/javascript-and-python-have-a-party.html</guid>
        
        <category>python</category>
        
        <category>javascript</category>
        
        <category>jupyter</category>
        
        
      </item>
    
      <item>
        <title>A Simple, Presentable Confusion Matrix with K-means Data</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TL;DR&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/a&gt;:  We make a confusion matrix (or ML metric) in python for a k-means algorithm and it’s good lookin’ :)&lt;/p&gt;

&lt;h3 id=&quot;step-1-the-aml-workflow&quot;&gt;Step 1 The AML Workflow&lt;/h3&gt;

&lt;p&gt;Our story starts with an Azure Machine Learning experiment or what I like to call data science workflow (I’ll use the word workflow here).   We could also have started with a file (see &lt;a href=&quot;#step-2-second-way&quot;&gt;Step 2 Second Way&lt;/a&gt;) instead, but either way, cleansed data gets fed into a k-means clustering algorithm after some initial processing (I like this brief post on &lt;a href=&quot;http://stanford.edu/~cpiech/cs221/handouts/kmeans.html&quot;&gt;k-means&lt;/a&gt; and it’s got python snippets as well!).  This post is about coding up one of the metrics that tells us how well an algorithm did if we have some “groundtruth” data to which to compare (remember that often we won’t in &lt;a href=&quot;http://machinelearningmastery.com/supervised-and-unsupervised-machine-learning-algorithms/&quot;&gt;unsupervised&lt;/a&gt; learning, but we are lucky today).&lt;/p&gt;

&lt;p&gt;This workflow is for text feature extraction, selection and clustering based on extracted features as n-grams (check out the intro &lt;a href=&quot;https://michhar.github.io/posts/a-python-flask-webapp-gets-smart&quot;&gt;here&lt;/a&gt; for a quick explanation of this workflow and n-grams).  I have one workflow with an &lt;em&gt;a priori&lt;/em&gt; value for the centroids of 10 for the k-means algorithm.  Here’s a screenshot of the workflow (starting dataset is a listing of 500 Wikipedia articles, cleaned up, along with some category labels for “groundtruth” comparisons later - remember, k-means is unsupervised).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/cm_workflow.png&quot; alt=&quot;show training workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This workflow is already ready for you to use for free (using a Microsoft ID like outlook.com, xbox, hotmail, etc. accounts.)  Find it in Cortana Intelligence Gallery (love this place for all of its abundance of resources):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gallery.cortanaintelligence.com/Experiment/N-Grams-and-Clustering-Find-similar-companies-Training-1&quot;&gt;https://gallery.cortanaintelligence.com/Experiment/N-Grams-and-Clustering-Find-similar-companies-Training-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just to highlight, in the AML workflow I selected my desired columns for the confusion matrix with &lt;code class=&quot;highlighter-rouge&quot;&gt;Select Columns in Dataset&lt;/code&gt; module to get ‘Category’ and ‘Assignment’ (cluster assignment as an integer from 0 to number of centroids I specified at the beginning).&lt;/p&gt;

&lt;h3 id=&quot;step-2-first-way&quot;&gt;Step 2 First Way&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Notice, I added a &lt;code class=&quot;highlighter-rouge&quot;&gt;Convert to CSV&lt;/code&gt; module (as you can see in above workflow diagram) after the &lt;code class=&quot;highlighter-rouge&quot;&gt;Select Columns in Dataset&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;I right clicked on the output node of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Convert to CSV&lt;/code&gt; and a little menu popped up from which I selected “Open in a new Notebook” and “Python 3” (because Python 3 rules of course - my R colleagues are going to really chide me now).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/cm_open_as_notebook.png&quot; alt=&quot;show opening as notebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This opened up a jupyter notebook with the following code snippet:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;azureml&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Workspace&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Workspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;experiments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;your experiment id shows up here&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;experiment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_intermediate_dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;your node id shows up here&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;port_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Results dataset'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data_type_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GenericCSV'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And imported my final dataset as a &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt; DataFrame.&lt;/p&gt;

&lt;p&gt;To get a confusion matrix I used &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas.crosstab&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I created a cell and used &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;crosstab&lt;/code&gt; to aggregate the Categories by Assignments and place into a matrix.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Creating our confusion matrix data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crosstab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Category'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Assignments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we went from&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Category	Assignments
0	Information Technology	0
1	Information Technology	9
2	Consumer Discretionary	0
3	Energy	4
4	Consumer Discretionary	0
5	Information Technology	2
6	Information Technology	0
7	Consumer Discretionary	0
8	Information Technology	3
9	Information Technology	2
10	Financials	8
11	Consumer Staples	0
12	Information Technology	6
13	Consumer Discretionary	7
14	Information Technology	2
15	Information Technology	2
16	Information Technology	0
17	Industrials	6
18	Consumer Staples	9
19	Health Care	9

...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Assignments                   0  1   2  3   4  5   6   7   8   9
Category                                                        
Consumer Discretionary       43  0   3  1   0  0   1  20   4   4
Consumer Staples             14  0   0  0   9  0   2   4   0   6
Energy                        2  1   0  1  12  0  28   0   0   0
Financials                   16  0   3  3   0  0   3   8  42   3
Health Care                   3  0   0  1   1  0   0   0   0  47

...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt; and a modified example from the python docs, with this code,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Plot our confusion matrix&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Code based on:  http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plot_confusion_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Confusion matrix'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BuPu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Set figure size before anything else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;colcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rowcnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# Adjust the size of the plot area ()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colcnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowcnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Normalize each row by the row sum&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum_row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newaxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;df_cm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;df_sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Show the plot&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interpolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'nearest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Give the plot a title and colorbar legend&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# All thes stuff for the tick mark labels&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xtick_marks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ytick_marks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xtick_marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ytick_marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# Just the regular xlabel and ylabel for plot&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# Setting to offset the labels with some space so they show up&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots_adjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    

&lt;span class=&quot;c&quot;&gt;# Plot the confusion matrix DataFrame&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plot_confusion_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                      &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Confusion matrix (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d centroids):  no normalization'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plot_confusion_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Confusion matrix (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d centroids):  with normalization'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to create the following awesome plots (a non-normalized and normalized confusion matrix):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/confusion_matrices.png&quot; alt=&quot;show the matrices&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-second-way&quot;&gt;Step 2 Second Way&lt;/h3&gt;

&lt;p&gt;I could have exported the AML Studio data as a file from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Convert to CSV&lt;/code&gt; module and downloaded the dataset after running.  I would then upload the dataset to a notebook (as is also shown in the sample notebook &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/machine_learning/A_Simple_Confusion_Matrix.ipynb&quot;&gt;here&lt;/a&gt;) and use the csv file with a ‘Category’ column and ‘Assigments’ column like is found &lt;a href=&quot;https://github.com/michhar/michhar.github.io/tree/gh-pages-source/data&quot;&gt;here&lt;/a&gt;.  It imports the data as a &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas&lt;/code&gt; dataframe.&lt;/p&gt;

&lt;p&gt;The code snippet would have been:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Dataset living on my github account exported from Azure ML&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://raw.githubusercontent.com/michhar/michhar.github.io/gh-pages-source/data/ngrams_and_clustering_result_dataset.csv'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Importing the csv data with pandas&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thanks for reading, check out the sample (static) jupyter notebook &lt;a href=&quot;https://github.com/michhar/python-jupyter-notebooks/blob/master/machine_learning/A_Simple_Confusion_Matrix.ipynb&quot;&gt;here&lt;/a&gt; and best of luck with those confusion matrices!&lt;/p&gt;

</description>
        <pubDate>Sun, 12 Feb 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/02/12/confusion-matrix-code-revealed.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/02/12/confusion-matrix-code-revealed.html</guid>
        
        <category>python</category>
        
        <category>data-science</category>
        
        <category>azure</category>
        
        
      </item>
    
      <item>
        <title>Creating a Smart Python Flask Web App using Azure Machine Learning</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TL;DR&quot;&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/a&gt;:  Azure Machine Learning + Visual Studio + Python Flask + GitHub + Azure = A Live Custom ML Model for You!&lt;/p&gt;

&lt;p&gt;Ok, so I have an interesting REST endpoint (in my case, a machine learning model for using a company’s Wikipedia article to find similar companies), what can I do next?  Why not serve it up in a simple web app to impress friends and wow colleagues?  (Really, you can use this intel to create a web app around any REST endpoint, as half of my purpose in writing this is to show how fast and easy Python Flask is).&lt;/p&gt;

&lt;p&gt;Essentially, we are making a web app wrapper around a data submission and retrieval REST endpoint that is created through Azure Machine Learning (AML) Studio (&lt;a href=&quot;https://studio.azureml.net&quot;&gt;https://studio.azureml.net&lt;/a&gt;), a friendly and powerful machine learning tool with a handy browser UI.  In this post, the endpoint is a service that clusters companies based on descriptive text (our input data).  The clustering model, a k-means algorithm, has been trained on close to 500 wikipedia entries, a cool example of &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-algorithm-choice#unsupervised&quot;&gt;unsupervised learning&lt;/a&gt;.  If you don’t know much yet about AML Studio and would like to know more &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-what-is-ml-studio&quot;&gt;this&lt;/a&gt; is a good place to start or dive in and learn by doing with a quick getting-started tutorial &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-create-experiment&quot;&gt;here&lt;/a&gt;.  You’ll need to know, at least, how to publish an experiment from Studio to get your Flask web app going.&lt;/p&gt;

&lt;p&gt;The ML web service is based around an AML scoring experiment, built from a training experiment in which &lt;code class=&quot;highlighter-rouge&quot;&gt;K-Means Clustering&lt;/code&gt; module is used to assign companies to groups based on features in their processed Wikipedia text.   The &lt;code class=&quot;highlighter-rouge&quot;&gt;Extract N-Gram Features from Text&lt;/code&gt; module (more info &lt;a href=&quot;https://msdn.microsoft.com/library/azure/a8a662d0-89bb-48c9-8562-9b9589124c4a&quot;&gt;here&lt;/a&gt;) is used after some initial cleansing of the text data (remove stop words, numbers, special characters, detect sentences, etc. - see the &lt;code class=&quot;highlighter-rouge&quot;&gt;Preprocess Text&lt;/code&gt; AML module &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/mt762915.aspx&quot;&gt;here&lt;/a&gt;) to extract features upon which to train the k-means clustering model and reduce the dimensionality to the most important chunks of information.  The scoring experiment uses a stored vocabulary from the training data n-gram feature extraction process (a good explanation of n-grams can be found in this blog on extracting features from text for classification, a different kind of ML algorithm - check it out &lt;a href=&quot;https://www.microsoft.com/developerblog/real-life-code/2015/11/30/Text-based-Feature-Representations-1-Gram-2-Gram-or-3-Gram-But-Just-How-Many-Gram.html&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Real quick, an example of extracting n-grams from:  “&lt;em&gt;Time lost is never found.&lt;/em&gt;”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An example from the blog link I just listed above (this &lt;a href=&quot;https://www.microsoft.com/developerblog/real-life-code/2015/11/30/Text-based-Feature-Representations-1-Gram-2-Gram-or-3-Gram-But-Just-How-Many-Gram.html&quot;&gt;one&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Where n=1, that is a uni-gram&lt;/th&gt;
      &lt;th&gt;Where n=2, that is a bi-gram&lt;/th&gt;
      &lt;th&gt;Where n=3, that is a tri-gram&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Time&lt;/td&gt;
      &lt;td&gt;Time lost&lt;/td&gt;
      &lt;td&gt;Time lost is&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lost&lt;/td&gt;
      &lt;td&gt;lost is&lt;/td&gt;
      &lt;td&gt;lost is never&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;is&lt;/td&gt;
      &lt;td&gt;is never&lt;/td&gt;
      &lt;td&gt;is never found&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;never&lt;/td&gt;
      &lt;td&gt;never found&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;found&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So, you have an idea of the initial training dataset (but imagine 10,000 or more of these n-grams as our features from all of that Wikipedia text - it can be seen why feature selection is sometimes helpful for narrowing down to the most important features and we can also do this with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Extract N-Gram Features from Text&lt;/code&gt; module in AML).  Ok, let’s move on to the app building fun.&lt;/p&gt;

&lt;p&gt;Our web app is going to utilize a microframework for building web apps purely in the Python programming language.  A big reason to begin in this framework is that Python, a popular Data Science language, is easy to read and learn and Visual Studio has a Flask web app template as part of the Python Tools for Visual Studio extension, making life much easier for us.  Python, as a language, is also known for being a popular web app development language and has other projects like &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; and &lt;a href=&quot;https://bottlepy.org/docs/dev/&quot;&gt;Bottle&lt;/a&gt; for these ends (also with templates in VS).&lt;/p&gt;

&lt;p&gt;That all being said, most of this post is about creating the Flask web app.  I’ll leave it to other guides and articles to discuss working with AML and k-means in detail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/webapp-input.PNG&quot; alt=&quot;input for webapp&quot; /&gt;
&lt;strong&gt;Above:  The deployed web app site&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;before-you-begin-a-few-things-to-do&quot;&gt;Before you Begin, a Few Things to Do…&lt;/h3&gt;

&lt;h4 id=&quot;tools&quot;&gt;Tools&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;[recommended]&lt;strong&gt;Visual Studio&lt;/strong&gt; installed (Community 2015 Edition is what I use; NB:  the preview of 2017 is adding PTVS soon…I’ll update on this later;  also, VS 2017 is available for Mac OSX) (&lt;a href=&quot;https://www.visualstudio.com/downloads/&quot;&gt;Visual Studio Community&lt;/a&gt;) with &lt;strong&gt;Python Tools for Visual Studio&lt;/strong&gt; installed (to get the Flask Web App template) which can be added during the install of VS or separately from &lt;a href=&quot;https://www.visualstudio.com/vs/python/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Git Bash&lt;/strong&gt; or &lt;strong&gt;git&lt;/strong&gt; installed - included in git download
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;accounts&quot;&gt;Accounts&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Azure Machine Learning Studio account&lt;/strong&gt; from &lt;a href=&quot;https://studio.azureml.net&quot;&gt;https://studio.azureml.net&lt;/a&gt; (free)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GitHub Account&lt;/strong&gt; - a code repository and collaboration tool we’ll use (free)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/join&quot;&gt;https://github.com/join&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Azure account&lt;/strong&gt; - use the one you have, sign up for a free trial at &lt;a href=&quot;https://azure.microsoft.com/en-us/free/&quot;&gt;https://azure.microsoft.com/en-us/free/&lt;/a&gt;, or, if you have an MSDN account and Azure as a benefit, link your Microsoft Account or Work/School Account to MSDN and activate the Azure benefit by following &lt;a href=&quot;https://www.visualstudio.com/en-us/docs/setup-admin/team-services/link-msdn-subscription-to-organizational-account-vs&quot;&gt;this&lt;/a&gt; guide&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;The deployed Azure Machine Learning &lt;em&gt;scoring&lt;/em&gt; experiment
    &lt;ul&gt;
      &lt;li&gt;Note:  We won’t cover this experiment and model here as it’s not the focus of this particular post, but a link to instructions is just below.&lt;/li&gt;
      &lt;li&gt;Aside:  These experiments are often called “predictive”, but in a clustering model we really just look for scores and cluster assignments, not predictions so let’s call it &lt;em&gt;scoring&lt;/em&gt; experiment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The scoring experiment which utilizes the k-means model and n-gram featurizer vocabulary created in the training experiment has the following layout in AML Studio:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/aml-studio-scoring.png&quot; alt=&quot;kmeans/ngram scoring experiment&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The scoring experiment you will need can be found &lt;a href=&quot;https://gallery.cortanaintelligence.com/Experiment/N-Grams-and-Clustering-Find-similar-companies-Scoring-Exp-2&quot;&gt;here&lt;/a&gt; (this will allow you to launch it in AML Studio).  Essentially, we are using AML Studio as a clever way to deploy a web service and not much more, but it’s capabilities as a canvas for creating a data science workflow are worth checking out if you like a visual workflow-type setup.&lt;/p&gt;

&lt;p&gt;Start at this spot in the Azure Docs to get this experiment deployed as a web service to use later in this guide post:  &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-walkthrough-5-publish-web-service#deploy-the-web-service&quot;&gt;https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-walkthrough-5-publish-web-service#deploy-the-web-service&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A similar guide with good diagrams on deploying the experiment as a web service can be picked up at section “4.2.2. Publishing a trained model as Web Service” in this tutorial: &lt;a href=&quot;https://github.com/Azure-Readiness/hol-azure-machine-learning/blob/master/004-lab-azureml-experiment.md#422-publishing-a-trained-model-as-web-service&quot;&gt;https://github.com/Azure-Readiness/hol-azure-machine-learning/blob/master/004-lab-azureml-experiment.md#422-publishing-a-trained-model-as-web-service&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-web-app-development&quot;&gt;The Web App Development&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Note:  Under REQUEST/RESPONSE for the AML Studio experiment (found after deploying as web service from Studio), one will find all of the specs needed to work with this endpoint.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s write a web app!  We’re going to begin in Visual Studio.  As an aside, did you know VS 2017 is available for Mac?!  What’s especially cool is that developers can share projects across Mac and Windows.  The Python Tools for Visual Studio extension isn’t available, however, on VS 2017 so I’m eagerly awaiting this capability.  Will report back later.  Since VS 2015 with PTVS is available for us on Windows we will be using the awesome Flask Web Project template that comes with it to kick start our web app dev in Windows 10.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open VS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new Python Flask web app project (this template should exist if one chooses Python - scroll down Templates -&amp;gt; Python -&amp;gt; Flask Web Project) with Python 3.5 (or whichever 3 you have will do) into a virtual environment.  At this point, you literally have a functioning web app.  Hit the Run (your default browser choice is next to the button) in VS and test out this template.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a new file called &lt;code class=&quot;highlighter-rouge&quot;&gt;forms.py&lt;/code&gt; to the main directory (alongside &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;).  This will contain the form-building code through which data will be sent to the REST endpoint for analysis.  There are three fields we need in our input form: title, category and text.  Title is the company title, category is an optional field for the category of company (e.g. information technology) and text is the Wikipedia article text about that company or some descriptive corpus.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-input-form--define-in-forms&quot;&gt;The input form:  define in “forms”&lt;/h4&gt;

&lt;p&gt;Place the following text in the &lt;code class=&quot;highlighter-rouge&quot;&gt;forms.py&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wtforms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextAreaField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validators&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This class will be used in the webapp as the main input form&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubmissionForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Category'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextAreaField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;the-routing-on-the-page--define-in-the-views&quot;&gt;The routing on the page:  define in the “views”&lt;/h4&gt;

&lt;p&gt;We will be modifying the existing template code as follows.&lt;/p&gt;

&lt;p&gt;The imports should look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FlaskAppAML&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FlaskAppAML.forms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubmissionForm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which added json handling, http request handling, os interaction and the way in which the forms class from above is available for use.&lt;/p&gt;

&lt;p&gt;Add a way to grab the API_KEY and URL at the beginning of the &lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Deployment environment variables defined on Azure (pull in with os.environ)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;API_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'API_KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;optionally place a default value for local dev here&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'URL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;optionally place a default value for local dev here&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and HEADERS global variable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Construct the HTTP request header&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HEADERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Authorization'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bearer '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;API_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Change the “home route” (landing page functionality), &lt;code class=&quot;highlighter-rouge&quot;&gt;def home&lt;/code&gt; method definition, to be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Our main app page/route&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Renders the home page which is the CNS of the web app currently, nothing pretty.&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubmissionForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Form has been submitted&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Plug in the data into a dictionary object &lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#  - data from the input form&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#  - text data must be converted to lowercase&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;Inputs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;input1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;ColumnNames&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;Title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;Category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;Text&quot;&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;Values&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&quot;GlobalParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Serialize the input data into json string&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Formulate the request&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEADERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Send this request to the AML service and render the results on page&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# response = requests.post(URL, headers=HEADERS, data=body)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;respdata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'result.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;From your friendly AML experiment's Web Service:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# An HTTP error&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'result.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'There was an error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Just serve up the input form&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'form.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Run App'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Input form to gain insights into a company using Azure Machine Learning'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;the-html-templates--how-the-information-gets-served&quot;&gt;The html templates:  how the information gets served&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;We add two new templates:  form.html, result.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;form.html&lt;/code&gt; gives us a construct for the user to enter in input data and the &lt;code class=&quot;highlighter-rouge&quot;&gt;result.html&lt;/code&gt;, a construct in which the results from the machine learning experiment can be displayed.&lt;/p&gt;

&lt;p&gt;Grab the &lt;code class=&quot;highlighter-rouge&quot;&gt;form.html&lt;/code&gt; code &lt;a href=&quot;https://github.com/michhar/flask-webapp-aml/blob/master/FlaskAppAML/templates/form.html&quot;&gt;here&lt;/a&gt;.
Grab the &lt;code class=&quot;highlighter-rouge&quot;&gt;result.html&lt;/code&gt; code &lt;a href=&quot;https://github.com/michhar/flask-webapp-aml/blob/master/FlaskAppAML/templates/result.html&quot;&gt;here&lt;/a&gt;.  Note, this code may result in slightly different web app appearances to this article.&lt;/p&gt;

&lt;p&gt;Now that we have some new code to handle calling the AML web service and html templates to handle input and output, let’s prepare to deploy by taking a look at some configuration.&lt;/p&gt;

&lt;h3 id=&quot;prepare-to-deploy-the-web-app-to-azure&quot;&gt;Prepare to Deploy the Web App to Azure&lt;/h3&gt;

&lt;p&gt;Before we publish, we must add two configuration-type files:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A web configuration file (web.config)&lt;/li&gt;
  &lt;li&gt;Virtual environment proxy (ptvs_virtualenv_proxy.py)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;web.config&lt;/code&gt; file may need some modifications, however the virtual environment proxy file should work as is from this folder.&lt;/p&gt;

&lt;h4 id=&quot;web-configuration-file&quot;&gt;Web Configuration file&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Add web.config at project level (alongside requirements.txt file)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It should look something like the following (you can actually add a template web.config similar to this one in VS by right-clicking on the FlaskAppAML folder -&amp;gt; Add -&amp;gt; New Item -&amp;gt; Azure web.config for FastCGI, but it will need a few modifications).  Note that the Python version may change in the future and this script might need modification.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;appSettings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WSGI_ALT_VIRTUALENV_HANDLER&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FlaskAppAML.app&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WSGI_ALT_VIRTUALENV_ACTIVATE_THIS&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D:\home\site\wwwroot\env\Scripts\python.exe&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WSGI_HANDLER&quot;&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ptvs_virtualenv_proxy.get_venv_handler()&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PYTHONPATH&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D:\home\site\wwwroot&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appSettings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.web&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;compilation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;debug=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targetFramework=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.web&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.webServer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;modules&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;runAllManagedModulesForAllRequests=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;handlers&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Python27_via_FastCGI&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Python34_via_FastCGI&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Python FastCGI&quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handler.fcgi&quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;verb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;modules=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FastCgiModule&quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;scriptProcessor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D:\Python34\python.exe|D:\Python34\Scripts\wfastcgi.py&quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;resourceType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unspecified&quot;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;requireAccess=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Script&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/handlers&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;rewrite&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;rules&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rule&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Static Files&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stopProcessing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;^/static/.*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ignoreCase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Rewrite&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;^/FlaskAppAML/static/.*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;appendQueryString=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rule&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Configure Python&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;stopProcessing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;match&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(.*)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ignoreCase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;conditions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/conditions&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Rewrite&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handler.fcgi/{R:1}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;appendQueryString=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rewrite&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.webServer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Possible modifications or places of note in the web config:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;WSGI_ALT_VIRTUALENV_HANDLER&lt;/code&gt; will very likely need to be modified.  Here it is &lt;code class=&quot;highlighter-rouge&quot;&gt;FlaskAppAML.app&lt;/code&gt;, referring to my flask application itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The line &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;action type=&quot;Rewrite&quot; url=&quot;^/FlaskAppAML/static/.*&quot; appendQueryString=&quot;true&quot; /&amp;gt;&lt;/code&gt; under rules MUST have the correct project name (here mine was FlaskAppAML).  This section ensures the static files (important for the web service appearance) can be found.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptProcessor&lt;/code&gt;, under &lt;code class=&quot;highlighter-rouge&quot;&gt;handlers&lt;/code&gt; in the web.config xml above, must correspond to the resources existing on the web server’s file system (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\Python34\python.exe&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;virtual-environment-proxy&quot;&gt;Virtual Environment Proxy&lt;/h4&gt;

&lt;p&gt;The code for this set of helper functions can be found &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service-web/web-sites-python-configure#virtual-environment-proxy&quot;&gt;here&lt;/a&gt; in the Azure documentation (that similar article talks about deploying continuously from a git repository - a good method to know as well).&lt;/p&gt;

&lt;p&gt;Just include &lt;code class=&quot;highlighter-rouge&quot;&gt;ptvs_virtualenv_proxy&lt;/code&gt; in the base of your project along with the &lt;code class=&quot;highlighter-rouge&quot;&gt;web.config&lt;/code&gt; (and auto-created &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;runserver.py&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Finally, to test all of this code locally just click the run button in the navi in VS (your default browser should also appear there).&lt;/p&gt;

&lt;p&gt;Congrats, you have tested this locally and things seem to be good.&lt;/p&gt;

&lt;h3 id=&quot;deploy-the-flask-web-app&quot;&gt;Deploy the Flask Web App&lt;/h3&gt;

&lt;h4 id=&quot;option-1-set-up-a-github-repository-as-the-deployment-option&quot;&gt;Option 1: Set up a GitHub Repository as the Deployment Option&lt;/h4&gt;

&lt;p&gt;This is the most customizable way, hence more complex, but also the most transparent and easy to troubleshoot.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to GitHub and create a new repository (I called mine &lt;code class=&quot;highlighter-rouge&quot;&gt;flask-webapp-aml&lt;/code&gt;, initializing with a README and a .gitignore for Visual Studio files.&lt;/li&gt;
  &lt;li&gt;In Git bash on the Desktop, type into the terminal the command to clone the new repository, for example: (I’m using SSH because it will allow me to push changes back up):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:&amp;lt;your github username without these triangle brackets&amp;gt;/flask-webapp-aml.git&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy all of the project code to this new repository folder locally (I just &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; on the command line in Git bash) to match this structure:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  FlaskAppAML/
  FlaskAppAML/__init__.py
  FlaskAppAML/forms.py
  FlaskAppAML/views.py
  FlaskAppAML/static -&amp;gt; *our static files*
  FlaskAppAML/templates -&amp;gt; *the html page templates*
  env/ -&amp;gt; *the entire python environment*
  ptvs_virtualenv_proxy.py
  README.md
  requirements.txt
  runserver.py
  runtime.txt
  web.config
  .skipPythonDeployment
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;If the empty &lt;code class=&quot;highlighter-rouge&quot;&gt;.skipPythonDeployment&lt;/code&gt; file is not in the base of your repository, add one now.  Also, make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; folder from the VS project is present.  This contains all of the python environment needed for running this web app (really anywhere).  We are skipping having the web service custom install all of the necessary modules by giving the service this &lt;code class=&quot;highlighter-rouge&quot;&gt;.skipPythonDeployment&lt;/code&gt; file and the &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; folder.&lt;/li&gt;
  &lt;li&gt;Add “__pycache__” on it’s own line to my “.gitignore” file and anything you don’t want uploaded to the GitHub when we “push” changes.&lt;/li&gt;
  &lt;li&gt;Now it all seems pretty tidy, so it’s time to push the changes up to be hosted on GitHub.  I &lt;em&gt;add&lt;/em&gt; (“stage”), &lt;em&gt;commit&lt;/em&gt; (commit my code locally with a message) and &lt;em&gt;push&lt;/em&gt; (push up to the web to be hosted on GitHub) all of my additions or any changes I’ve made.  I can do this &lt;em&gt;add/commit/push&lt;/em&gt; again as many times as I want in the future.  I must, however, do all three consecutively and in that order otherwise it gets complicated.  So, my commands look like:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; (from the base of the repository)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;initial commit message&quot;&lt;/code&gt; (the -m is our message so be brief, but descriptive - visible to the world)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; (we could also have written &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;, but it’s not necessary to be so verbose right now)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create an App Service Web App in the Azure Portal (https://portal.azure.com) by clicking “+” and search for “web app”, then go through the wizard to create one.&lt;/li&gt;
  &lt;li&gt;Update the Deployment options in the Azure Portal for the web app.  For our Web App, under “APP DEPLOYMENT”, open the “Deployment options” blade.  For Choose Source, choose GitHub (you may have to log in to your GitHub here to link it).  Under Choose project, pick the GitHub repository to which you just pushed code and click OK.&lt;/li&gt;
  &lt;li&gt;Now we add a couple of variables to the Azure Portal Web App for safe-keeping.  There are “environmental variables” in the code (they look like &lt;code class=&quot;highlighter-rouge&quot;&gt;os.environ.get('FOO')&lt;/code&gt;):  one for the AML Web Service’s URL and one for the API_KEY - these are the necessary values we need to access our published AML scoring experiment.  To have these available for our web app we need to put them somewhere discoverable and that is as variables under “App settings” in the “Application settings” blade for our own Web App in the Azure Portal.
 &lt;img src=&quot;/jekyll-slender-template/img/flaskapp-adding-sys-vars.jpg&quot; alt=&quot;image of entering in keys to Azure portal app service&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Ensure that, in the Portal, under Application Settings, Python is set to the appropriate version (default is that “Python” is Off in settings - so will need to manually switch to it’s version).&lt;/li&gt;
  &lt;li&gt;If we go back to the “Deployment options” we can see how our build is going.  This process will automatically happen for us every time a new change is made to our GitHub repository.  Ensure that this build completes successfully.&lt;/li&gt;
  &lt;li&gt;Finally, if you go to “Overview” and click on the web app’s URL, you’ll see your site.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congrats on completing this process!  You should now have a functioning barebones, machine learning web app.  Go ahead and try it out. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-slender-template/img/webapp-output.PNG&quot; alt=&quot;input for webapp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you encounter any problems, check the Troubleshooting section below, Azure docs, or StackOverflow.  Also, leave a comment if it’s a bug in the code or process.&lt;/p&gt;

&lt;h4 id=&quot;option-2-publish-and-deploy-from-vs-as-an-azure-app-service-web-app&quot;&gt;Option 2: Publish and Deploy from VS as an Azure App Service Web App&lt;/h4&gt;

&lt;p&gt;To deploy we must also publish this project to Azure (it’s done together with VS).  Fortunately, from within VS (note, I’m in VS 2017, but it’s available in previous releases) there’s a &lt;strong&gt;“Publish…“&lt;/strong&gt; option.  Right-click on the project name and in the pop-up &lt;strong&gt;“Publish…“&lt;/strong&gt; should be available.  Click this and simply go through the wizard to set up an Azure App Service Web App.  It should be very straightforward and easy to do.&lt;/p&gt;

&lt;p&gt;As an alternative to publishing/deploying directly from VS, one can leverage a git repository or use code on GitHub as a deployment option.  Similar instructions can be found in &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/app-service-web/web-sites-python-configure&quot;&gt;this&lt;/a&gt; Azure article.&lt;/p&gt;

&lt;h3 id=&quot;make-it-your-own&quot;&gt;Make it Your Own&lt;/h3&gt;

&lt;p&gt;Modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;layout.html&lt;/code&gt; file with app name and navi layout changes.  Or change your custom stylesheet under static -&amp;gt; content -&amp;gt; site.css.&lt;/p&gt;

&lt;p&gt;Go grab all of the code at https://github.com/michhar/flask-webapp-aml and add it to a project, test, develop and deploy.  You could even if you wish just fork this repository and deploy directly from that in the Azure Portal, but then that would have been too easy. ;)&lt;/p&gt;

&lt;h3 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;All sample code can be found at https://github.com/michhar/flask-webapp-aml - it may, over time, have more complex samples, so check it out.&lt;/li&gt;
  &lt;li&gt;Go to Application Settings and ensure Python is enabled along with other key settings in the Azure Portal&lt;/li&gt;
  &lt;li&gt;Go to Console (under Development Tools) and make sure all files and programs specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;web.config&lt;/code&gt; exists.&lt;/li&gt;
  &lt;li&gt;Ensure in &lt;code class=&quot;highlighter-rouge&quot;&gt;web.config&lt;/code&gt;, that the “scriptProcessor” key/value in handlers is correct (that these paths exist on the server file system).&lt;/li&gt;
  &lt;li&gt;Check FREB Logs in the Portal for more information around warnings and errors (make sure you are logging for those during this phase).&lt;/li&gt;
  &lt;li&gt;Post comments here or if around the code, under issues here:  https://github.com/michhar/flask-webapp-aml/issues - many thanks!&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Feb 2017 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2017/02/05/a-python-flask-webapp-gets-smart.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2017/02/05/a-python-flask-webapp-gets-smart.html</guid>
        
        <category>python</category>
        
        <category>web-dev</category>
        
        <category>visual-studio</category>
        
        
      </item>
    
      <item>
        <title>OCRBot Makes a Connection to the Cloud</title>
        <description>&lt;p&gt;&lt;strong&gt;A short conversation with OCRBot on Skype - using the Bot Framework on the Azure Cloud&lt;/strong&gt;
&lt;br /&gt;&lt;br /&gt;
Update:  November 16, 2016 Microsoft announced the &lt;a href=&quot;https://azure.microsoft.com/en-us/services/bot-service/&quot;&gt;Azure Bot Service&lt;/a&gt; in Preview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: In &lt;a href=&quot;how-to-bot-on-mac&quot;&gt;Part 1&lt;/a&gt; I built an OCR bot using the Bot Framework (BF) from Microsoft and the Cognitive Services Computer Vision API and conversed with it using the command line on my Mac.  In this HowTo article I deploy the OCR bot to the cloud.    If you keep reading you’ll learn the technical know-how to take the bot code and turn it into deployed Skype bot.&lt;/p&gt;

&lt;p&gt;“Hello, you’ve reached [name of company].  How can I help you today?”  –says the mechanical voice on the other end of the phone&lt;/p&gt;

&lt;p&gt;We know right away that this is a bot.  But bots can be much more than a question and answer machine that deals in natural language.  In fact, it doesn’t have to be language intelligence at all.&lt;/p&gt;

&lt;p&gt;I could, for instance, send my bot an audio clip of my favorite song and it could send back the name of the singer.  Or I could send my bot an image and it could tell me what the scene is like, who is in it, what other objects are there, etc.&lt;/p&gt;

&lt;p&gt;I could even leave intelligence out of it and use a bot to order a sandwich.  Bots are just apps.&lt;/p&gt;

&lt;p&gt;In this case our bot uses optical character recognition (OCR) to extract text from images.  All of the code is &lt;a href=&quot;https://github.com/michhar/bot-education-ocrbot&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It almost goes without saying, but since the sky is really the limit, it’s a good idea to be thoughtful in our creation and usage of these apps or bots.  A current favorite quote is from Satya Nadella (from &lt;a href=&quot;http://www.slate.com/articles/technology/future_tense/2016/06/microsoft_ceo_satya_nadella_humans_and_a_i_can_work_together_to_solve_society.html&quot;&gt;this&lt;/a&gt; article):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A.I. must have algorithmic accountability so that humans can undo unintended harm. We must design these technologies for the expected and the unexpected.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s continue our story of a chat bot, ocrbot.  Ocrbot takes an image link as input and sends back the text found in that image, if any.  I could imagine, then, doing more with that text (e.g. sentiment, key phrases) or extending this bot in other ways (e.g. speech, search).&lt;/p&gt;

&lt;p&gt;The Bot Framework gives me an easy way to connect my bot so that it’s compatible and available on channels like Slack, Skype, Facebook Messenger, Twilio, and more.&lt;/p&gt;

&lt;p&gt;In the last post (“Building an OCR Chat Bot with the Microsoft Bot Framework on my Mac”), we met ocrbot and chatted with this bot locally (the upper path in the diagram below).  This time we are going to deploy ocrbot to the cloud and communicate on a real channel (the lower path in the diagram below).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/Sketch3.png&quot; alt=&quot;ocrbot skype&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;My process for connecting ocrbot to the cloud&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To start, these are my subscriptions used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Github account (free) - for hosting code&lt;/li&gt;
  &lt;li&gt;Azure account (free trial) - for continuous cloud deployment&lt;/li&gt;
  &lt;li&gt;Microsoft account (free) - for Cognitive Services, BF and Skype&lt;/li&gt;
  &lt;li&gt;Cognitive Services Computer Vision API key (free) - for OCR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these are my steps at a glance:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The ocrbot gets forked GitHub
    &lt;ul&gt;
      &lt;li&gt;Fork the repo (easier to start with the existing code)&lt;/li&gt;
      &lt;li&gt;Update the README to say something useful for my purposes&lt;/li&gt;
      &lt;li&gt;The ocrbot gets a web app service for continuous deployment
        &lt;ul&gt;
          &lt;li&gt;Create a Web App in the Azure Portal for the bot’s endpoint&lt;/li&gt;
          &lt;li&gt;Choose GitHub as my deployment source&lt;/li&gt;
          &lt;li&gt;Get the Cognitive Services Computer Vision API key&lt;/li&gt;
          &lt;li&gt;Add some environment variables&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The ocrbot gets registered on the BF
        &lt;ul&gt;
          &lt;li&gt;Fill out profile including url endpoint&lt;/li&gt;
          &lt;li&gt;Record app ID and app password after configuration&lt;/li&gt;
          &lt;li&gt;Update app service with the new app ID and password&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The ocrbot takes a test
        &lt;ul&gt;
          &lt;li&gt;Test connection in BF Developer’s Portal&lt;/li&gt;
          &lt;li&gt;Test on Skype&lt;/li&gt;
          &lt;li&gt;Update the bot’s message on GitHub and observe the change mid-conversation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-ocrbot-gets-forked-on-github&quot;&gt;The ocrbot gets forked on GitHub&lt;/h2&gt;

&lt;p&gt;I logged into &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;, a free code and document repository, and navigated to the &lt;a href=&quot;https://github.com/michhar/bot-education-ocrbot&quot;&gt;bot-education-ocrbot&lt;/a&gt; repository.  Next, I forked the repository so that it would appear in my GitHub account profile.  From there, I can now use it, push/pull and annotate with markdown text.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/repo_fork.png&quot; alt=&quot;fork repo&quot; /&gt;
&lt;strong&gt;Forking the ocrbot repository&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I like to change the README to say something specific to why I forked it like:
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/repo_change_readme.png&quot; alt=&quot;fork repo&quot; /&gt;
&lt;strong&gt;Modifying README markdown file&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-ocrbot-gets-a-web-app-service-for-continuous-deployment&quot;&gt;The ocrbot gets a web app service for continuous deployment&lt;/h2&gt;

&lt;p&gt;Honestly, except for communicating on a channel with the bot, this is the coolest part in my opinion.  I’ve set my bot up such that any change I commit or push to my GitHub repository, reflects immediately, even if I’m mid-conversation.&lt;/p&gt;

&lt;p&gt;So, since I’m using Microsoft’s cloud, Azure, I signed into the Azure portal at &lt;a href=&quot;https://portal.azure.com&quot;&gt;https://portal.azure.com&lt;/a&gt;.  I then added a Web App by clicking the “+” icon and searching for “web app” (also, found under “Web and Mobile”).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/portal_select_webapp.png&quot; alt=&quot;select web app&quot; /&gt;
&lt;strong&gt;Selecting Web App from portal menu&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I filled out all of the information and created the web app.&lt;/p&gt;

&lt;p&gt;I then went to my resources in the portal (the blue cube - first icon below the “+” icon on the left panel) and selected my newly created resource group.  In that resource group I found my web app (labelled as an “App Service”).  It opened what we call a “blade” and in that I navigated to “Deployment options” from which I can select different sources.  In this instance I selected “GitHub” as in:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/portal_select_github.png&quot; alt=&quot;select github&quot; /&gt;
&lt;strong&gt;Selecting GitHub from the web app deployment source blade (aka App Service) menu&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Using this wizard, I authorized with my GitHub account credentials (through GitHub launched within the wizard) for the web app to be able to pull in my code each time a change happens. I selected my project or repo (bot-education-ocrbot in this case) and clicked “Ok.”  Continuous deployment deployed!&lt;/p&gt;

&lt;p&gt;The final setup step in this section was to add placeholder variables for the BF app ID and password that I obtain in the next section.  This is going to make it so that the BF and my app can talk to each other.&lt;/p&gt;

&lt;p&gt;To do this I clicked on “Application Settings” under “Settings” (just below the “Deployment options”).  This took me to a blade within which I scrolled down to “App settings” and entered in key-value pairs with filler text that correspond to the variable names in the &lt;code class=&quot;highlighter-rouge&quot;&gt;configuration.js&lt;/code&gt; from my project (so, &lt;code class=&quot;highlighter-rouge&quot;&gt;MICROSOFT_APP_ID&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MICROSOFT_APP_PASSWORD&lt;/code&gt;).  I didn’t need to do it right at that point, but thought it’d be a good idea so I didn’t overlook later (a string on my finger):&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/portal_sys_vars.png&quot; alt=&quot;web app settings&quot; /&gt;
&lt;strong&gt;App environment variables which correspond to the environment variables in ocrbot’s config file&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The actual values will be filled in in the next section.&lt;/p&gt;

&lt;p&gt;Also, in this settings blade, I  created a variable corresponding to my Cognitive Services Computer Vision API key so I could use their OCR service.  Therefore, I entered in a third variable, the &lt;code class=&quot;highlighter-rouge&quot;&gt;VISION_API_KEY&lt;/code&gt; below my other two.  I set it to my actual, real key from my subscription.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To get this free key, btw, I simply went to the Cognitive Services APIs &lt;a href=&quot;https://www.microsoft.com/cognitive-services/en-us/apis&quot;&gt;website&lt;/a&gt;, My Account (I used my Microsoft Account - used to be called Live ID - which is just my gmail account linked up; if I had an xbox, hotmail, or outlook.com account I would already have one), and signed up for a trial subscription for Computer Vision.  It’s just the free tier of a Microsoft service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Make sure to then save the settings in this blade.&lt;/p&gt;

&lt;h2 id=&quot;the-ocrbot-gets-registered-on-the-bf&quot;&gt;The ocrbot gets registered on the BF&lt;/h2&gt;

&lt;p&gt;This part is pretty painless.  Basically, we go to the Bot Framework Developer’s Portal (same site where the docs and Bot Directory live) at &lt;a href=&quot;https://dev.botframework.com&quot;&gt;https://dev.botframework.com&lt;/a&gt;, fill out a profile, do a small config and that’s it.&lt;/p&gt;

&lt;p&gt;I called my bot, ocrbot (doesn’t have to be unique) and gave it a public handle, ocrbot100 (has to be globally unique).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/register_name.png&quot; alt=&quot;web app settings&quot; /&gt;
&lt;strong&gt;My ocrbot’s profile&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For the Configuration part, the messaging endpoint is the web app service URL (I went back to the Azure portal to grab this URL from the web app service - In “Overview”) appended “/api/messages” to the end of it and changed &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;, all of which so that the Bot Connector can route the messages correctly (the Bot Connector is a component of the BF which handles many things including routing messages).  For me this was something like:  &lt;code class=&quot;highlighter-rouge&quot;&gt;https://nameofwebapp.azurewebsites.net/api/messages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also in the configuration part, a wizard took me through the process of getting the app ID and password and I just had to make sure to record the password in the pop-up and the app ID on the profile page.  Yup, that’s the same app ID and password I set up dummy environment variables earlier in the Azure portal.  Now they will have real values.&lt;/p&gt;

&lt;p&gt;Except for pasting these values back into the Azure portal, the registration in the BF Developer’s portal is done.  So, I went ahead and did the pasting.&lt;/p&gt;

&lt;h2 id=&quot;the-ocrbot-takes-a-test&quot;&gt;The ocrbot takes a test&lt;/h2&gt;

&lt;p&gt;Finally, the really fun part:  here, I got to check my bot’s connection and then have a real conversation.  Back in the BF Dev Portal I went to “Test connection to your bot” and clicked on the “Test” button as shown here which pings my bot’s messaging endpoint to confirm a connection.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/dev_portal_test.png&quot; alt=&quot;web app settings&quot; /&gt;
&lt;strong&gt;Testing in the Developer’s Portal&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I finally and with excitement scrolled down on the page shown above and clicked on “Add to Skype.”  After launching Skype (I had to make sure I was logged into Skype with the same Microsoft ID I was using in the Dev Portal) I tried sending some messages:  a greeting and some image URLs from the web.  I was curious to see if ocrbot liked Johnny Cash.  Why not?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/skype_johnny_cash.png&quot; alt=&quot;web app settings&quot; /&gt;
&lt;strong&gt;ocrbot goes country - or at least reads country song lyrics from an image&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To test the nifty continuous deployment from GitHub, I changed ocrbot’s message on GitHub and sync’d that repository in the Azure Portal (under the web app service and “Deployment Options”).  This happened mid-conversation:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/jekyll-slender-template/img/skype_github_update.png&quot; alt=&quot;web app settings&quot; /&gt;
&lt;strong&gt;ocrbot’s message updated mid-conversation&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Well, that’s it folks.  To recap, ocrbot and I accomplished:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Forking the original ocrbot repository from GitHub into my GitHub
    &lt;ul&gt;
      &lt;li&gt;Deploying ocrbot as a web app service on Azure&lt;/li&gt;
      &lt;li&gt;Registering ocrbot with the Bot Framework&lt;/li&gt;
      &lt;li&gt;Taking ocrbot out for a spin on Skype&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ocrbot stays busy in the next topics in this blog series:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ocrbot makes a friend (on Slack)&lt;/li&gt;
  &lt;li&gt;Ocrbot gets attached (attachments)&lt;/li&gt;
  &lt;li&gt;Ocrbot learns to talk (speech APIs)&lt;/li&gt;
  &lt;li&gt;Ocrbot goes to the store (bring your own data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Come back soon and thanks for reading!&lt;/p&gt;

&lt;p&gt;~Micheleen&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://img.yumpu.com/43191597/1/358x462/interview-donald-e-knuth-literate-programming.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Nov 2016 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/jekyll-slender-template/2016/11/15/ocrbot-makes-a-connection.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-slender-template/2016/11/15/ocrbot-makes-a-connection.html</guid>
        
        <category>bots</category>
        
        <category>dev</category>
        
        
      </item>
    
  </channel>
</rss>
